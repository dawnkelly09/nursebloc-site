"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey";
exports.ids = ["vendor-chunks/@turnkey"];
exports.modules = {

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\nexports.bool = bool;\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = { number, bool, bytes, hash, exists, output };\nexports[\"default\"] = assert;\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19hc3NlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLGNBQWMsR0FBRyxZQUFZLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxjQUFjLEdBQUcsZUFBZTtBQUNoSDtBQUNBO0FBQ0EsMERBQTBELEVBQUU7QUFDNUQ7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNBLGNBQWM7QUFDZCxpQkFBaUI7QUFDakIsa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvX2Fzc2VydC5qcz82MjI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vdXRwdXQgPSBleHBvcnRzLmV4aXN0cyA9IGV4cG9ydHMuaGFzaCA9IGV4cG9ydHMuYnl0ZXMgPSBleHBvcnRzLmJvb2wgPSBleHBvcnRzLm51bWJlciA9IGV4cG9ydHMuaXNCeXRlcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwb3NpdGl2ZSBpbnRlZ2VyIGV4cGVjdGVkLCBub3QgJHtufWApO1xufVxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBib29sZWFuIGV4cGVjdGVkLCBub3QgJHtifWApO1xufVxuZXhwb3J0cy5ib29sID0gYm9vbDtcbi8vIGNvcGllZCBmcm9tIHV0aWxzXG5mdW5jdGlvbiBpc0J5dGVzKGEpIHtcbiAgICByZXR1cm4gKGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XG4gICAgICAgIChhICE9IG51bGwgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIGEuY29uc3RydWN0b3IubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKSk7XG59XG5leHBvcnRzLmlzQnl0ZXMgPSBpc0J5dGVzO1xuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghaXNCeXRlcyhiKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVWludDhBcnJheSBleHBlY3RlZCBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZXhwb3J0cy5ieXRlcyA9IGJ5dGVzO1xuZnVuY3Rpb24gaGFzaChoKSB7XG4gICAgaWYgKHR5cGVvZiBoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGguYmxvY2tMZW4pO1xufVxuZXhwb3J0cy5oYXNoID0gaGFzaDtcbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZXhwb3J0cy5leGlzdHMgPSBleGlzdHM7XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0cy5vdXRwdXQgPSBvdXRwdXQ7XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_md.js":
/*!************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/_md.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HashMD = exports.Maj = exports.Chi = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\nexports.Chi = Chi;\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\nexports.Maj = Maj;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.HashMD = HashMD;\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_u64.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/_u64.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports[\"default\"] = u64;\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL191NjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsYUFBYSxHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsV0FBVyxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxhQUFhLEdBQUcsYUFBYSxHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsZUFBZTtBQUN6VztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvX3U2NC5qcz8xMWM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hZGQ1TCA9IGV4cG9ydHMuYWRkNUggPSBleHBvcnRzLmFkZDRIID0gZXhwb3J0cy5hZGQ0TCA9IGV4cG9ydHMuYWRkM0ggPSBleHBvcnRzLmFkZDNMID0gZXhwb3J0cy5hZGQgPSBleHBvcnRzLnJvdGxCTCA9IGV4cG9ydHMucm90bEJIID0gZXhwb3J0cy5yb3RsU0wgPSBleHBvcnRzLnJvdGxTSCA9IGV4cG9ydHMucm90cjMyTCA9IGV4cG9ydHMucm90cjMySCA9IGV4cG9ydHMucm90ckJMID0gZXhwb3J0cy5yb3RyQkggPSBleHBvcnRzLnJvdHJTTCA9IGV4cG9ydHMucm90clNIID0gZXhwb3J0cy5zaHJTTCA9IGV4cG9ydHMuc2hyU0ggPSBleHBvcnRzLnRvQmlnID0gZXhwb3J0cy5zcGxpdCA9IGV4cG9ydHMuZnJvbUJpZyA9IHZvaWQgMDtcbmNvbnN0IFUzMl9NQVNLNjQgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIgKiogMzIgLSAxKTtcbmNvbnN0IF8zMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDMyKTtcbi8vIFdlIGFyZSBub3QgdXNpbmcgQmlnVWludDY0QXJyYXksIGJlY2F1c2UgdGhleSBhcmUgZXh0cmVtZWx5IHNsb3cgYXMgcGVyIDIwMjJcbmZ1bmN0aW9uIGZyb21CaWcobiwgbGUgPSBmYWxzZSkge1xuICAgIGlmIChsZSlcbiAgICAgICAgcmV0dXJuIHsgaDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSwgbDogTnVtYmVyKChuID4+IF8zMm4pICYgVTMyX01BU0s2NCkgfTtcbiAgICByZXR1cm4geyBoOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB8IDAsIGw6IE51bWJlcihuICYgVTMyX01BU0s2NCkgfCAwIH07XG59XG5leHBvcnRzLmZyb21CaWcgPSBmcm9tQmlnO1xuZnVuY3Rpb24gc3BsaXQobHN0LCBsZSA9IGZhbHNlKSB7XG4gICAgbGV0IEFoID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICAgIGxldCBBbCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IGgsIGwgfSA9IGZyb21CaWcobHN0W2ldLCBsZSk7XG4gICAgICAgIFtBaFtpXSwgQWxbaV1dID0gW2gsIGxdO1xuICAgIH1cbiAgICByZXR1cm4gW0FoLCBBbF07XG59XG5leHBvcnRzLnNwbGl0ID0gc3BsaXQ7XG5jb25zdCB0b0JpZyA9IChoLCBsKSA9PiAoQmlnSW50KGggPj4+IDApIDw8IF8zMm4pIHwgQmlnSW50KGwgPj4+IDApO1xuZXhwb3J0cy50b0JpZyA9IHRvQmlnO1xuLy8gZm9yIFNoaWZ0IGluIFswLCAzMilcbmNvbnN0IHNoclNIID0gKGgsIF9sLCBzKSA9PiBoID4+PiBzO1xuZXhwb3J0cy5zaHJTSCA9IHNoclNIO1xuY29uc3Qgc2hyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuZXhwb3J0cy5zaHJTTCA9IHNoclNMO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RyU0ggPSAoaCwgbCwgcykgPT4gKGggPj4+IHMpIHwgKGwgPDwgKDMyIC0gcykpO1xuZXhwb3J0cy5yb3RyU0ggPSByb3RyU0g7XG5jb25zdCByb3RyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuZXhwb3J0cy5yb3RyU0wgPSByb3RyU0w7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcbmV4cG9ydHMucm90ckJIID0gcm90ckJIO1xuY29uc3Qgcm90ckJMID0gKGgsIGwsIHMpID0+IChoID4+PiAocyAtIDMyKSkgfCAobCA8PCAoNjQgLSBzKSk7XG5leHBvcnRzLnJvdHJCTCA9IHJvdHJCTDtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3Igc2hpZnQ9PT0zMiAoanVzdCBzd2FwcyBsJmgpXG5jb25zdCByb3RyMzJIID0gKF9oLCBsKSA9PiBsO1xuZXhwb3J0cy5yb3RyMzJIID0gcm90cjMySDtcbmNvbnN0IHJvdHIzMkwgPSAoaCwgX2wpID0+IGg7XG5leHBvcnRzLnJvdHIzMkwgPSByb3RyMzJMO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5leHBvcnRzLnJvdGxTSCA9IHJvdGxTSDtcbmNvbnN0IHJvdGxTTCA9IChoLCBsLCBzKSA9PiAobCA8PCBzKSB8IChoID4+PiAoMzIgLSBzKSk7XG5leHBvcnRzLnJvdGxTTCA9IHJvdGxTTDtcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxuY29uc3Qgcm90bEJIID0gKGgsIGwsIHMpID0+IChsIDw8IChzIC0gMzIpKSB8IChoID4+PiAoNjQgLSBzKSk7XG5leHBvcnRzLnJvdGxCSCA9IHJvdGxCSDtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuZXhwb3J0cy5yb3RsQkwgPSByb3RsQkw7XG4vLyBKUyB1c2VzIDMyLWJpdCBzaWduZWQgaW50ZWdlcnMgZm9yIGJpdHdpc2Ugb3BlcmF0aW9ucyB3aGljaCBtZWFucyB3ZSBjYW5ub3Rcbi8vIHNpbXBsZSB0YWtlIGNhcnJ5IG91dCBvZiBsb3cgYml0IHN1bSBieSBzaGlmdCwgd2UgbmVlZCB0byB1c2UgZGl2aXNpb24uXG5mdW5jdGlvbiBhZGQoQWgsIEFsLCBCaCwgQmwpIHtcbiAgICBjb25zdCBsID0gKEFsID4+PiAwKSArIChCbCA+Pj4gMCk7XG4gICAgcmV0dXJuIHsgaDogKEFoICsgQmggKyAoKGwgLyAyICoqIDMyKSB8IDApKSB8IDAsIGw6IGwgfCAwIH07XG59XG5leHBvcnRzLmFkZCA9IGFkZDtcbi8vIEFkZGl0aW9uIHdpdGggbW9yZSB0aGFuIDIgZWxlbWVudHNcbmNvbnN0IGFkZDNMID0gKEFsLCBCbCwgQ2wpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKTtcbmV4cG9ydHMuYWRkM0wgPSBhZGQzTDtcbmNvbnN0IGFkZDNIID0gKGxvdywgQWgsIEJoLCBDaCkgPT4gKEFoICsgQmggKyBDaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuZXhwb3J0cy5hZGQzSCA9IGFkZDNIO1xuY29uc3QgYWRkNEwgPSAoQWwsIEJsLCBDbCwgRGwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCk7XG5leHBvcnRzLmFkZDRMID0gYWRkNEw7XG5jb25zdCBhZGQ0SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmV4cG9ydHMuYWRkNEggPSBhZGQ0SDtcbmNvbnN0IGFkZDVMID0gKEFsLCBCbCwgQ2wsIERsLCBFbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKSArIChFbCA+Pj4gMCk7XG5leHBvcnRzLmFkZDVMID0gYWRkNUw7XG5jb25zdCBhZGQ1SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoLCBFaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgRWggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmV4cG9ydHMuYWRkNUggPSBhZGQ1SDtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdTY0ID0ge1xuICAgIGZyb21CaWcsIHNwbGl0LCB0b0JpZyxcbiAgICBzaHJTSCwgc2hyU0wsXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxuICAgIHJvdHIzMkgsIHJvdHIzMkwsXG4gICAgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLFxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB1NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/cryptoNode.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/cryptoNode.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.crypto = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nconst nc = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nexports.crypto = nc && typeof nc === 'object' && 'webcrypto' in nc ? nc.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2NyeXB0b05vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGdDQUFhO0FBQ2hDLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvY3J5cHRvTm9kZS5qcz9jZWIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcnlwdG8gPSB2b2lkIDA7XG4vLyBXZSB1c2UgV2ViQ3J5cHRvIGFrYSBnbG9iYWxUaGlzLmNyeXB0bywgd2hpY2ggZXhpc3RzIGluIGJyb3dzZXJzIGFuZCBub2RlLmpzIDE2Ky5cbi8vIFNlZSB1dGlscy50cyBmb3IgZGV0YWlscy5cbi8vIFRoZSBmaWxlIHdpbGwgdGhyb3cgb24gbm9kZS5qcyAxNCBhbmQgZWFybGllci5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IG5jID0gcmVxdWlyZShcIm5vZGU6Y3J5cHRvXCIpO1xuZXhwb3J0cy5jcnlwdG8gPSBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICd3ZWJjcnlwdG8nIGluIG5jID8gbmMud2ViY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvTm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha256.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha256.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha224 = exports.sha256 = void 0;\nconst _md_js_1 = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_md.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js\");\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js_1.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + (0, _md_js_1.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha3.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha3.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js\");\nconst _u64_js_1 = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_u64.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.exists)(this, false);\n        (0, _assert_js_1.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL3NoYTMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsY0FBYyxHQUFHLGVBQWU7QUFDdE8scUJBQXFCLG1CQUFPLENBQUMsZ0dBQWM7QUFDM0Msa0JBQWtCLG1CQUFPLENBQUMsMEZBQVc7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsNEZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQyw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCLDRDQUE0QyxVQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaURBQWlEO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQix1R0FBdUc7QUFDdkcsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvc2hhMy5qcz8yNzg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGFrZTI1NiA9IGV4cG9ydHMuc2hha2UxMjggPSBleHBvcnRzLmtlY2Nha181MTIgPSBleHBvcnRzLmtlY2Nha18zODQgPSBleHBvcnRzLmtlY2Nha18yNTYgPSBleHBvcnRzLmtlY2Nha18yMjQgPSBleHBvcnRzLnNoYTNfNTEyID0gZXhwb3J0cy5zaGEzXzM4NCA9IGV4cG9ydHMuc2hhM18yNTYgPSBleHBvcnRzLnNoYTNfMjI0ID0gZXhwb3J0cy5LZWNjYWsgPSBleHBvcnRzLmtlY2Nha1AgPSB2b2lkIDA7XG5jb25zdCBfYXNzZXJ0X2pzXzEgPSByZXF1aXJlKFwiLi9fYXNzZXJ0LmpzXCIpO1xuY29uc3QgX3U2NF9qc18xID0gcmVxdWlyZShcIi4vX3U2NC5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbi8vIFNIQTMgKGtlY2NhaykgaXMgYmFzZWQgb24gYSBuZXcgZGVzaWduOiBiYXNpY2FsbHksIHRoZSBpbnRlcm5hbCBzdGF0ZSBpcyBiaWdnZXIgdGhhbiBvdXRwdXQgc2l6ZS5cbi8vIEl0J3MgY2FsbGVkIGEgc3BvbmdlIGZ1bmN0aW9uLlxuLy8gVmFyaW91cyBwZXIgcm91bmQgY29uc3RhbnRzIGNhbGN1bGF0aW9uc1xuY29uc3QgU0hBM19QSSA9IFtdO1xuY29uc3QgU0hBM19ST1RMID0gW107XG5jb25zdCBfU0hBM19JT1RBID0gW107XG5jb25zdCBfMG4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDApO1xuY29uc3QgXzFuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgxKTtcbmNvbnN0IF8ybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMik7XG5jb25zdCBfN24gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDcpO1xuY29uc3QgXzI1Nm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDI1Nik7XG5jb25zdCBfMHg3MW4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDB4NzEpO1xuZm9yIChsZXQgcm91bmQgPSAwLCBSID0gXzFuLCB4ID0gMSwgeSA9IDA7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcbiAgICAvLyBQaVxuICAgIFt4LCB5XSA9IFt5LCAoMiAqIHggKyAzICogeSkgJSA1XTtcbiAgICBTSEEzX1BJLnB1c2goMiAqICg1ICogeSArIHgpKTtcbiAgICAvLyBSb3RhdGlvbmFsXG4gICAgU0hBM19ST1RMLnB1c2goKCgocm91bmQgKyAxKSAqIChyb3VuZCArIDIpKSAvIDIpICUgNjQpO1xuICAgIC8vIElvdGFcbiAgICBsZXQgdCA9IF8wbjtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDc7IGorKykge1xuICAgICAgICBSID0gKChSIDw8IF8xbikgXiAoKFIgPj4gXzduKSAqIF8weDcxbikpICUgXzI1Nm47XG4gICAgICAgIGlmIChSICYgXzJuKVxuICAgICAgICAgICAgdCBePSBfMW4gPDwgKChfMW4gPDwgLyogQF9fUFVSRV9fICovIEJpZ0ludChqKSkgLSBfMW4pO1xuICAgIH1cbiAgICBfU0hBM19JT1RBLnB1c2godCk7XG59XG5jb25zdCBbU0hBM19JT1RBX0gsIFNIQTNfSU9UQV9MXSA9IC8qIEBfX1BVUkVfXyAqLyAoMCwgX3U2NF9qc18xLnNwbGl0KShfU0hBM19JT1RBLCB0cnVlKTtcbi8vIExlZnQgcm90YXRpb24gKHdpdGhvdXQgMCwgMzIsIDY0KVxuY29uc3Qgcm90bEggPSAoaCwgbCwgcykgPT4gKHMgPiAzMiA/ICgwLCBfdTY0X2pzXzEucm90bEJIKShoLCBsLCBzKSA6ICgwLCBfdTY0X2pzXzEucm90bFNIKShoLCBsLCBzKSk7XG5jb25zdCByb3RsTCA9IChoLCBsLCBzKSA9PiAocyA+IDMyID8gKDAsIF91NjRfanNfMS5yb3RsQkwpKGgsIGwsIHMpIDogKDAsIF91NjRfanNfMS5yb3RsU0wpKGgsIGwsIHMpKTtcbi8vIFNhbWUgYXMga2VjY2FrZjE2MDAsIGJ1dCBhbGxvd3MgdG8gc2tpcCBzb21lIHJvdW5kc1xuZnVuY3Rpb24ga2VjY2FrUChzLCByb3VuZHMgPSAyNCkge1xuICAgIGNvbnN0IEIgPSBuZXcgVWludDMyQXJyYXkoNSAqIDIpO1xuICAgIC8vIE5PVEU6IGFsbCBpbmRpY2VzIGFyZSB4MiBzaW5jZSB3ZSBzdG9yZSBzdGF0ZSBhcyB1MzIgaW5zdGVhZCBvZiB1NjQgKGJpZ2ludHMgdG8gc2xvdyBpbiBqcylcbiAgICBmb3IgKGxldCByb3VuZCA9IDI0IC0gcm91bmRzOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG4gICAgICAgIC8vIFRoZXRhIM64XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgICAgIEJbeF0gPSBzW3hdIF4gc1t4ICsgMTBdIF4gc1t4ICsgMjBdIF4gc1t4ICsgMzBdIF4gc1t4ICsgNDBdO1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4ICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeDEgPSAoeCArIDgpICUgMTA7XG4gICAgICAgICAgICBjb25zdCBpZHgwID0gKHggKyAyKSAlIDEwO1xuICAgICAgICAgICAgY29uc3QgQjAgPSBCW2lkeDBdO1xuICAgICAgICAgICAgY29uc3QgQjEgPSBCW2lkeDAgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IFRoID0gcm90bEgoQjAsIEIxLCAxKSBeIEJbaWR4MV07XG4gICAgICAgICAgICBjb25zdCBUbCA9IHJvdGxMKEIwLCBCMSwgMSkgXiBCW2lkeDEgKyAxXTtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgNTA7IHkgKz0gMTApIHtcbiAgICAgICAgICAgICAgICBzW3ggKyB5XSBePSBUaDtcbiAgICAgICAgICAgICAgICBzW3ggKyB5ICsgMV0gXj0gVGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmhvICjPgSkgYW5kIFBpICjPgClcbiAgICAgICAgbGV0IGN1ckggPSBzWzJdO1xuICAgICAgICBsZXQgY3VyTCA9IHNbM107XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMjQ7IHQrKykge1xuICAgICAgICAgICAgY29uc3Qgc2hpZnQgPSBTSEEzX1JPVExbdF07XG4gICAgICAgICAgICBjb25zdCBUaCA9IHJvdGxIKGN1ckgsIGN1ckwsIHNoaWZ0KTtcbiAgICAgICAgICAgIGNvbnN0IFRsID0gcm90bEwoY3VySCwgY3VyTCwgc2hpZnQpO1xuICAgICAgICAgICAgY29uc3QgUEkgPSBTSEEzX1BJW3RdO1xuICAgICAgICAgICAgY3VySCA9IHNbUEldO1xuICAgICAgICAgICAgY3VyTCA9IHNbUEkgKyAxXTtcbiAgICAgICAgICAgIHNbUEldID0gVGg7XG4gICAgICAgICAgICBzW1BJICsgMV0gPSBUbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGkgKM+HKVxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDUwOyB5ICs9IDEwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICAgICAgICAgICAgQlt4XSA9IHNbeSArIHhdO1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICAgICAgICAgIHNbeSArIHhdIF49IH5CWyh4ICsgMikgJSAxMF0gJiBCWyh4ICsgNCkgJSAxMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW90YSAozrkpXG4gICAgICAgIHNbMF0gXj0gU0hBM19JT1RBX0hbcm91bmRdO1xuICAgICAgICBzWzFdIF49IFNIQTNfSU9UQV9MW3JvdW5kXTtcbiAgICB9XG4gICAgQi5maWxsKDApO1xufVxuZXhwb3J0cy5rZWNjYWtQID0ga2VjY2FrUDtcbmNsYXNzIEtlY2NhayBleHRlbmRzIHV0aWxzX2pzXzEuSGFzaCB7XG4gICAgLy8gTk9URTogd2UgYWNjZXB0IGFyZ3VtZW50cyBpbiBieXRlcyBpbnN0ZWFkIG9mIGJpdHMgaGVyZS5cbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIGVuYWJsZVhPRiA9IGZhbHNlLCByb3VuZHMgPSAyNCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRoaXMuc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5lbmFibGVYT0YgPSBlbmFibGVYT0Y7XG4gICAgICAgIHRoaXMucm91bmRzID0gcm91bmRzO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMucG9zT3V0ID0gMDtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICAvLyBDYW4gYmUgcGFzc2VkIGZyb20gdXNlciBhcyBka0xlblxuICAgICAgICAoMCwgX2Fzc2VydF9qc18xLm51bWJlcikob3V0cHV0TGVuKTtcbiAgICAgICAgLy8gMTYwMCA9IDV4NSBtYXRyaXggb2YgNjRiaXQuICAxNjAwIGJpdHMgPT09IDIwMCBieXRlc1xuICAgICAgICBpZiAoMCA+PSB0aGlzLmJsb2NrTGVuIHx8IHRoaXMuYmxvY2tMZW4gPj0gMjAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGEzIHN1cHBvcnRzIG9ubHkga2VjY2FrLWYxNjAwIGZ1bmN0aW9uJyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgVWludDhBcnJheSgyMDApO1xuICAgICAgICB0aGlzLnN0YXRlMzIgPSAoMCwgdXRpbHNfanNfMS51MzIpKHRoaXMuc3RhdGUpO1xuICAgIH1cbiAgICBrZWNjYWsoKSB7XG4gICAgICAgIGlmICghdXRpbHNfanNfMS5pc0xFKVxuICAgICAgICAgICAgKDAsIHV0aWxzX2pzXzEuYnl0ZVN3YXAzMikodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAga2VjY2FrUCh0aGlzLnN0YXRlMzIsIHRoaXMucm91bmRzKTtcbiAgICAgICAgaWYgKCF1dGlsc19qc18xLmlzTEUpXG4gICAgICAgICAgICAoMCwgdXRpbHNfanNfMS5ieXRlU3dhcDMyKSh0aGlzLnN0YXRlMzIpO1xuICAgICAgICB0aGlzLnBvc091dCA9IDA7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgKDAsIF9hc3NlcnRfanNfMS5leGlzdHMpKHRoaXMpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgZGF0YSA9ICgwLCB1dGlsc19qc18xLnRvQnl0ZXMpKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRha2U7IGkrKylcbiAgICAgICAgICAgICAgICBzdGF0ZVt0aGlzLnBvcysrXSBePSBkYXRhW3BvcysrXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyA9PT0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZmluaXNoKCkge1xuICAgICAgICBpZiAodGhpcy5maW5pc2hlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUsIHN1ZmZpeCwgcG9zLCBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgLy8gRG8gdGhlIHBhZGRpbmdcbiAgICAgICAgc3RhdGVbcG9zXSBePSBzdWZmaXg7XG4gICAgICAgIGlmICgoc3VmZml4ICYgMHg4MCkgIT09IDAgJiYgcG9zID09PSBibG9ja0xlbiAtIDEpXG4gICAgICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgICBzdGF0ZVtibG9ja0xlbiAtIDFdIF49IDB4ODA7XG4gICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgfVxuICAgIHdyaXRlSW50byhvdXQpIHtcbiAgICAgICAgKDAsIF9hc3NlcnRfanNfMS5leGlzdHMpKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgKDAsIF9hc3NlcnRfanNfMS5ieXRlcykob3V0KTtcbiAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgY29uc3QgYnVmZmVyT3V0ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMCwgbGVuID0gb3V0Lmxlbmd0aDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zT3V0ID49IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgICAgICBjb25zdCB0YWtlID0gTWF0aC5taW4oYmxvY2tMZW4gLSB0aGlzLnBvc091dCwgbGVuIC0gcG9zKTtcbiAgICAgICAgICAgIG91dC5zZXQoYnVmZmVyT3V0LnN1YmFycmF5KHRoaXMucG9zT3V0LCB0aGlzLnBvc091dCArIHRha2UpLCBwb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3NPdXQgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHhvZkludG8ob3V0KSB7XG4gICAgICAgIC8vIFNoYTMvS2VjY2FrIHVzYWdlIHdpdGggWE9GIGlzIHByb2JhYmx5IG1pc3Rha2UsIG9ubHkgU0hBS0UgaW5zdGFuY2VzIGNhbiBkbyBYT0ZcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZVhPRilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWE9GIGlzIG5vdCBwb3NzaWJsZSBmb3IgdGhpcyBpbnN0YW5jZScpO1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICB9XG4gICAgeG9mKGJ5dGVzKSB7XG4gICAgICAgICgwLCBfYXNzZXJ0X2pzXzEubnVtYmVyKShieXRlcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnhvZkludG8obmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKTtcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgKDAsIF9hc3NlcnRfanNfMS5vdXRwdXQpKG91dCwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmZpbmlzaGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWdlc3QoKSB3YXMgYWxyZWFkeSBjYWxsZWQnKTtcbiAgICAgICAgdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlnZXN0SW50byhuZXcgVWludDhBcnJheSh0aGlzLm91dHB1dExlbikpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUuZmlsbCgwKTtcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbiwgcm91bmRzLCBlbmFibGVYT0YgfSA9IHRoaXM7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCBlbmFibGVYT0YsIHJvdW5kcykpO1xuICAgICAgICB0by5zdGF0ZTMyLnNldCh0aGlzLnN0YXRlMzIpO1xuICAgICAgICB0by5wb3MgPSB0aGlzLnBvcztcbiAgICAgICAgdG8ucG9zT3V0ID0gdGhpcy5wb3NPdXQ7XG4gICAgICAgIHRvLmZpbmlzaGVkID0gdGhpcy5maW5pc2hlZDtcbiAgICAgICAgdG8ucm91bmRzID0gcm91bmRzO1xuICAgICAgICAvLyBTdWZmaXggY2FuIGNoYW5nZSBpbiBjU0hBS0VcbiAgICAgICAgdG8uc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLmVuYWJsZVhPRiA9IGVuYWJsZVhPRjtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gdGhpcy5kZXN0cm95ZWQ7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG5leHBvcnRzLktlY2NhayA9IEtlY2NhaztcbmNvbnN0IGdlbiA9IChzdWZmaXgsIGJsb2NrTGVuLCBvdXRwdXRMZW4pID0+ICgwLCB1dGlsc19qc18xLndyYXBDb25zdHJ1Y3RvcikoKCkgPT4gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4pKTtcbmV4cG9ydHMuc2hhM18yMjQgPSBnZW4oMHgwNiwgMTQ0LCAyMjQgLyA4KTtcbi8qKlxuICogU0hBMy0yNTYgaGFzaCBmdW5jdGlvblxuICogQHBhcmFtIG1lc3NhZ2UgLSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnRzLnNoYTNfMjU2ID0gZ2VuKDB4MDYsIDEzNiwgMjU2IC8gOCk7XG5leHBvcnRzLnNoYTNfMzg0ID0gZ2VuKDB4MDYsIDEwNCwgMzg0IC8gOCk7XG5leHBvcnRzLnNoYTNfNTEyID0gZ2VuKDB4MDYsIDcyLCA1MTIgLyA4KTtcbmV4cG9ydHMua2VjY2FrXzIyNCA9IGdlbigweDAxLCAxNDQsIDIyNCAvIDgpO1xuLyoqXG4gKiBrZWNjYWstMjU2IGhhc2ggZnVuY3Rpb24uIERpZmZlcmVudCBmcm9tIFNIQTMtMjU2LlxuICogQHBhcmFtIG1lc3NhZ2UgLSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnRzLmtlY2Nha18yNTYgPSBnZW4oMHgwMSwgMTM2LCAyNTYgLyA4KTtcbmV4cG9ydHMua2VjY2FrXzM4NCA9IGdlbigweDAxLCAxMDQsIDM4NCAvIDgpO1xuZXhwb3J0cy5rZWNjYWtfNTEyID0gZ2VuKDB4MDEsIDcyLCA1MTIgLyA4KTtcbmNvbnN0IGdlblNoYWtlID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gKDAsIHV0aWxzX2pzXzEud3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMpKChvcHRzID0ge30pID0+IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3B0cy5ka0xlbiA9PT0gdW5kZWZpbmVkID8gb3V0cHV0TGVuIDogb3B0cy5ka0xlbiwgdHJ1ZSkpO1xuZXhwb3J0cy5zaGFrZTEyOCA9IGdlblNoYWtlKDB4MWYsIDE2OCwgMTI4IC8gOCk7XG5leHBvcnRzLnNoYWtlMjU2ID0gZ2VuU2hha2UoMHgxZiwgMTM2LCAyNTYgLyA4KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/cryptoNode.js\");\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/_assert.js\");\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexports.rotl = rotl;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\nexports.byteSwap = byteSwap;\n// Conditionally byte swap if on a big-endian platform\nexports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = (0, exports.byteSwap)(arr[i]);\n    }\n}\nexports.byteSwap32 = byteSwap32;\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0, _assert_js_1.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0, _assert_js_1.bytes)(data);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0, _assert_js_1.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsa0NBQWtDLEdBQUcsK0JBQStCLEdBQUcsdUJBQXVCLEdBQUcsaUJBQWlCLEdBQUcsWUFBWSxHQUFHLG1CQUFtQixHQUFHLGVBQWUsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxnQkFBZ0IsR0FBRyxZQUFZLEdBQUcsWUFBWSxHQUFHLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxXQUFXLEdBQUcsVUFBVSxHQUFHLGVBQWU7QUFDcGQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsMkdBQXNCO0FBQy9DLHFCQUFxQixtQkFBTyxDQUFDLGdHQUFjO0FBQzNDLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1osWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsMkNBQTJDLGFBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxXQUFXO0FBQ3ZFLDBEQUEwRDtBQUMxRDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL3V0aWxzLmpzPzMwODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiEgbm9ibGUtaGFzaGVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy53cmFwWE9GQ29uc3RydWN0b3JXaXRoT3B0cyA9IGV4cG9ydHMud3JhcENvbnN0cnVjdG9yV2l0aE9wdHMgPSBleHBvcnRzLndyYXBDb25zdHJ1Y3RvciA9IGV4cG9ydHMuY2hlY2tPcHRzID0gZXhwb3J0cy5IYXNoID0gZXhwb3J0cy5jb25jYXRCeXRlcyA9IGV4cG9ydHMudG9CeXRlcyA9IGV4cG9ydHMudXRmOFRvQnl0ZXMgPSBleHBvcnRzLmFzeW5jTG9vcCA9IGV4cG9ydHMubmV4dFRpY2sgPSBleHBvcnRzLmhleFRvQnl0ZXMgPSBleHBvcnRzLmJ5dGVzVG9IZXggPSBleHBvcnRzLmJ5dGVTd2FwMzIgPSBleHBvcnRzLmJ5dGVTd2FwSWZCRSA9IGV4cG9ydHMuYnl0ZVN3YXAgPSBleHBvcnRzLmlzTEUgPSBleHBvcnRzLnJvdGwgPSBleHBvcnRzLnJvdHIgPSBleHBvcnRzLmNyZWF0ZVZpZXcgPSBleHBvcnRzLnUzMiA9IGV4cG9ydHMudTggPSBleHBvcnRzLmlzQnl0ZXMgPSB2b2lkIDA7XG4vLyBXZSB1c2UgV2ViQ3J5cHRvIGFrYSBnbG9iYWxUaGlzLmNyeXB0bywgd2hpY2ggZXhpc3RzIGluIGJyb3dzZXJzIGFuZCBub2RlLmpzIDE2Ky5cbi8vIG5vZGUuanMgdmVyc2lvbnMgZWFybGllciB0aGFuIHYxOSBkb24ndCBkZWNsYXJlIGl0IGluIGdsb2JhbCBzY29wZS5cbi8vIEZvciBub2RlLmpzLCBwYWNrYWdlLmpzb24jZXhwb3J0cyBmaWVsZCBtYXBwaW5nIHJld3JpdGVzIGltcG9ydFxuLy8gZnJvbSBgY3J5cHRvYCB0byBgY3J5cHRvTm9kZWAsIHdoaWNoIGltcG9ydHMgbmF0aXZlIG1vZHVsZS5cbi8vIE1ha2VzIHRoZSB1dGlscyB1bi1pbXBvcnRhYmxlIGluIGJyb3dzZXJzIHdpdGhvdXQgYSBidW5kbGVyLlxuLy8gT25jZSBub2RlLmpzIDE4IGlzIGRlcHJlY2F0ZWQgKDIwMjUtMDQtMzApLCB3ZSBjYW4ganVzdCBkcm9wIHRoZSBpbXBvcnQuXG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL2NyeXB0b1wiKTtcbmNvbnN0IF9hc3NlcnRfanNfMSA9IHJlcXVpcmUoXCIuL19hc3NlcnQuanNcIik7XG4vLyBleHBvcnQgeyBpc0J5dGVzIH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbi8vIFdlIGNhbid0IHJldXNlIGlzQnl0ZXMgZnJvbSBfYXNzZXJ0LCBiZWNhdXNlIHNvbWVob3cgdGhpcyBjYXVzZXMgaHVnZSBwZXJmIGlzc3Vlc1xuZnVuY3Rpb24gaXNCeXRlcyhhKSB7XG4gICAgcmV0dXJuIChhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAoYSAhPSBudWxsICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVaW50OEFycmF5JykpO1xufVxuZXhwb3J0cy5pc0J5dGVzID0gaXNCeXRlcztcbi8vIENhc3QgYXJyYXkgdG8gZGlmZmVyZW50IHR5cGVcbmNvbnN0IHU4ID0gKGFycikgPT4gbmV3IFVpbnQ4QXJyYXkoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKTtcbmV4cG9ydHMudTggPSB1ODtcbmNvbnN0IHUzMiA9IChhcnIpID0+IG5ldyBVaW50MzJBcnJheShhcnIuYnVmZmVyLCBhcnIuYnl0ZU9mZnNldCwgTWF0aC5mbG9vcihhcnIuYnl0ZUxlbmd0aCAvIDQpKTtcbmV4cG9ydHMudTMyID0gdTMyO1xuLy8gQ2FzdCBhcnJheSB0byB2aWV3XG5jb25zdCBjcmVhdGVWaWV3ID0gKGFycikgPT4gbmV3IERhdGFWaWV3KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBhcnIuYnl0ZUxlbmd0aCk7XG5leHBvcnRzLmNyZWF0ZVZpZXcgPSBjcmVhdGVWaWV3O1xuLy8gVGhlIHJvdGF0ZSByaWdodCAoY2lyY3VsYXIgcmlnaHQgc2hpZnQpIG9wZXJhdGlvbiBmb3IgdWludDMyXG5jb25zdCByb3RyID0gKHdvcmQsIHNoaWZ0KSA9PiAod29yZCA8PCAoMzIgLSBzaGlmdCkpIHwgKHdvcmQgPj4+IHNoaWZ0KTtcbmV4cG9ydHMucm90ciA9IHJvdHI7XG4vLyBUaGUgcm90YXRlIGxlZnQgKGNpcmN1bGFyIGxlZnQgc2hpZnQpIG9wZXJhdGlvbiBmb3IgdWludDMyXG5jb25zdCByb3RsID0gKHdvcmQsIHNoaWZ0KSA9PiAod29yZCA8PCBzaGlmdCkgfCAoKHdvcmQgPj4+ICgzMiAtIHNoaWZ0KSkgPj4+IDApO1xuZXhwb3J0cy5yb3RsID0gcm90bDtcbmV4cG9ydHMuaXNMRSA9IG5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbMHgxMTIyMzM0NF0pLmJ1ZmZlcilbMF0gPT09IDB4NDQ7XG4vLyBUaGUgYnl0ZSBzd2FwIG9wZXJhdGlvbiBmb3IgdWludDMyXG5jb25zdCBieXRlU3dhcCA9ICh3b3JkKSA9PiAoKHdvcmQgPDwgMjQpICYgMHhmZjAwMDAwMCkgfFxuICAgICgod29yZCA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgKCh3b3JkID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICgod29yZCA+Pj4gMjQpICYgMHhmZik7XG5leHBvcnRzLmJ5dGVTd2FwID0gYnl0ZVN3YXA7XG4vLyBDb25kaXRpb25hbGx5IGJ5dGUgc3dhcCBpZiBvbiBhIGJpZy1lbmRpYW4gcGxhdGZvcm1cbmV4cG9ydHMuYnl0ZVN3YXBJZkJFID0gZXhwb3J0cy5pc0xFID8gKG4pID0+IG4gOiAobikgPT4gKDAsIGV4cG9ydHMuYnl0ZVN3YXApKG4pO1xuLy8gSW4gcGxhY2UgYnl0ZSBzd2FwIGZvciBVaW50MzJBcnJheVxuZnVuY3Rpb24gYnl0ZVN3YXAzMihhcnIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJbaV0gPSAoMCwgZXhwb3J0cy5ieXRlU3dhcCkoYXJyW2ldKTtcbiAgICB9XG59XG5leHBvcnRzLmJ5dGVTd2FwMzIgPSBieXRlU3dhcDMyO1xuLy8gQXJyYXkgd2hlcmUgaW5kZXggMHhmMCAoMjQwKSBpcyBtYXBwZWQgdG8gc3RyaW5nICdmMCdcbmNvbnN0IGhleGVzID0gLyogQF9fUFVSRV9fICovIEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoXywgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIEBleGFtcGxlIGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSkpIC8vICdjYWZlMDEyMydcbiAqL1xuZnVuY3Rpb24gYnl0ZXNUb0hleChieXRlcykge1xuICAgICgwLCBfYXNzZXJ0X2pzXzEuYnl0ZXMpKGJ5dGVzKTtcbiAgICAvLyBwcmUtY2FjaGluZyBpbXByb3ZlcyB0aGUgc3BlZWQgNnhcbiAgICBsZXQgaGV4ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBoZXggKz0gaGV4ZXNbYnl0ZXNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufVxuZXhwb3J0cy5ieXRlc1RvSGV4ID0gYnl0ZXNUb0hleDtcbi8vIFdlIHVzZSBvcHRpbWl6ZWQgdGVjaG5pcXVlIHRvIGNvbnZlcnQgaGV4IHN0cmluZyB0byBieXRlIGFycmF5XG5jb25zdCBhc2NpaXMgPSB7IF8wOiA0OCwgXzk6IDU3LCBfQTogNjUsIF9GOiA3MCwgX2E6IDk3LCBfZjogMTAyIH07XG5mdW5jdGlvbiBhc2NpaVRvQmFzZTE2KGNoYXIpIHtcbiAgICBpZiAoY2hhciA+PSBhc2NpaXMuXzAgJiYgY2hhciA8PSBhc2NpaXMuXzkpXG4gICAgICAgIHJldHVybiBjaGFyIC0gYXNjaWlzLl8wO1xuICAgIGlmIChjaGFyID49IGFzY2lpcy5fQSAmJiBjaGFyIDw9IGFzY2lpcy5fRilcbiAgICAgICAgcmV0dXJuIGNoYXIgLSAoYXNjaWlzLl9BIC0gMTApO1xuICAgIGlmIChjaGFyID49IGFzY2lpcy5fYSAmJiBjaGFyIDw9IGFzY2lpcy5fZilcbiAgICAgICAgcmV0dXJuIGNoYXIgLSAoYXNjaWlzLl9hIC0gMTApO1xuICAgIHJldHVybjtcbn1cbi8qKlxuICogQGV4YW1wbGUgaGV4VG9CeXRlcygnY2FmZTAxMjMnKSAvLyBVaW50OEFycmF5LmZyb20oWzB4Y2EsIDB4ZmUsIDB4MDEsIDB4MjNdKVxuICovXG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIGNvbnN0IGhsID0gaGV4Lmxlbmd0aDtcbiAgICBjb25zdCBhbCA9IGhsIC8gMjtcbiAgICBpZiAoaGwgJSAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRlZCBoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgdW5wYWRkZWQgaGV4IG9mIGxlbmd0aCAnICsgaGwpO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYWwpO1xuICAgIGZvciAobGV0IGFpID0gMCwgaGkgPSAwOyBhaSA8IGFsOyBhaSsrLCBoaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IG4xID0gYXNjaWlUb0Jhc2UxNihoZXguY2hhckNvZGVBdChoaSkpO1xuICAgICAgICBjb25zdCBuMiA9IGFzY2lpVG9CYXNlMTYoaGV4LmNoYXJDb2RlQXQoaGkgKyAxKSk7XG4gICAgICAgIGlmIChuMSA9PT0gdW5kZWZpbmVkIHx8IG4yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBoZXhbaGldICsgaGV4W2hpICsgMV07XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBub24taGV4IGNoYXJhY3RlciBcIicgKyBjaGFyICsgJ1wiIGF0IGluZGV4ICcgKyBoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbYWldID0gbjEgKiAxNiArIG4yO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLmhleFRvQnl0ZXMgPSBoZXhUb0J5dGVzO1xuLy8gVGhlcmUgaXMgbm8gc2V0SW1tZWRpYXRlIGluIGJyb3dzZXIgYW5kIHNldFRpbWVvdXQgaXMgc2xvdy5cbi8vIGNhbGwgb2YgYXN5bmMgZm4gd2lsbCByZXR1cm4gUHJvbWlzZSwgd2hpY2ggd2lsbCBiZSBmdWxsZmlsZWQgb25seSBvblxuLy8gbmV4dCBzY2hlZHVsZXIgcXVldWUgcHJvY2Vzc2luZyBzdGVwIGFuZCB0aGlzIGlzIGV4YWN0bHkgd2hhdCB3ZSBuZWVkLlxuY29uc3QgbmV4dFRpY2sgPSBhc3luYyAoKSA9PiB7IH07XG5leHBvcnRzLm5leHRUaWNrID0gbmV4dFRpY2s7XG4vLyBSZXR1cm5zIGNvbnRyb2wgdG8gdGhyZWFkIGVhY2ggJ3RpY2snIG1zIHRvIGF2b2lkIGJsb2NraW5nXG5hc3luYyBmdW5jdGlvbiBhc3luY0xvb3AoaXRlcnMsIHRpY2ssIGNiKSB7XG4gICAgbGV0IHRzID0gRGF0ZS5ub3coKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJzOyBpKyspIHtcbiAgICAgICAgY2IoaSk7XG4gICAgICAgIC8vIERhdGUubm93KCkgaXMgbm90IG1vbm90b25pYywgc28gaW4gY2FzZSBpZiBjbG9jayBnb2VzIGJhY2t3YXJkcyB3ZSByZXR1cm4gcmV0dXJuIGNvbnRyb2wgdG9vXG4gICAgICAgIGNvbnN0IGRpZmYgPSBEYXRlLm5vdygpIC0gdHM7XG4gICAgICAgIGlmIChkaWZmID49IDAgJiYgZGlmZiA8IHRpY2spXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgYXdhaXQgKDAsIGV4cG9ydHMubmV4dFRpY2spKCk7XG4gICAgICAgIHRzICs9IGRpZmY7XG4gICAgfVxufVxuZXhwb3J0cy5hc3luY0xvb3AgPSBhc3luY0xvb3A7XG4vKipcbiAqIEBleGFtcGxlIHV0ZjhUb0J5dGVzKCdhYmMnKSAvLyBuZXcgVWludDhBcnJheShbOTcsIDk4LCA5OV0pXG4gKi9cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1dGY4VG9CeXRlcyBleHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpKTsgLy8gaHR0cHM6Ly9idWd6aWwubGEvMTY4MTgwOVxufVxuZXhwb3J0cy51dGY4VG9CeXRlcyA9IHV0ZjhUb0J5dGVzO1xuLyoqXG4gKiBOb3JtYWxpemVzIChub24taGV4KSBzdHJpbmcgb3IgVWludDhBcnJheSB0byBVaW50OEFycmF5LlxuICogV2FybmluZzogd2hlbiBVaW50OEFycmF5IGlzIHBhc3NlZCwgaXQgd291bGQgTk9UIGdldCBjb3BpZWQuXG4gKiBLZWVwIGluIG1pbmQgZm9yIGZ1dHVyZSBtdXRhYmxlIG9wZXJhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZXMoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpXG4gICAgICAgIGRhdGEgPSB1dGY4VG9CeXRlcyhkYXRhKTtcbiAgICAoMCwgX2Fzc2VydF9qc18xLmJ5dGVzKShkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmV4cG9ydHMudG9CeXRlcyA9IHRvQnl0ZXM7XG4vKipcbiAqIENvcGllcyBzZXZlcmFsIFVpbnQ4QXJyYXlzIGludG8gb25lLlxuICovXG5mdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gYXJyYXlzW2ldO1xuICAgICAgICAoMCwgX2Fzc2VydF9qc18xLmJ5dGVzKShhKTtcbiAgICAgICAgc3VtICs9IGEubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShzdW0pO1xuICAgIGZvciAobGV0IGkgPSAwLCBwYWQgPSAwOyBpIDwgYXJyYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGEgPSBhcnJheXNbaV07XG4gICAgICAgIHJlcy5zZXQoYSwgcGFkKTtcbiAgICAgICAgcGFkICs9IGEubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5jb25jYXRCeXRlcyA9IGNvbmNhdEJ5dGVzO1xuLy8gRm9yIHJ1bnRpbWUgY2hlY2sgaWYgY2xhc3MgaW1wbGVtZW50cyBpbnRlcmZhY2VcbmNsYXNzIEhhc2gge1xuICAgIC8vIFNhZmUgdmVyc2lvbiB0aGF0IGNsb25lcyBpbnRlcm5hbCBzdGF0ZVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmVJbnRvKCk7XG4gICAgfVxufVxuZXhwb3J0cy5IYXNoID0gSGFzaDtcbmNvbnN0IHRvU3RyID0ge30udG9TdHJpbmc7XG5mdW5jdGlvbiBjaGVja09wdHMoZGVmYXVsdHMsIG9wdHMpIHtcbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkICYmIHRvU3RyLmNhbGwob3B0cykgIT09ICdbb2JqZWN0IE9iamVjdF0nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbnMgc2hvdWxkIGJlIG9iamVjdCBvciB1bmRlZmluZWQnKTtcbiAgICBjb25zdCBtZXJnZWQgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCBvcHRzKTtcbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuZXhwb3J0cy5jaGVja09wdHMgPSBjaGVja09wdHM7XG5mdW5jdGlvbiB3cmFwQ29uc3RydWN0b3IoaGFzaENvbnMpIHtcbiAgICBjb25zdCBoYXNoQyA9IChtc2cpID0+IGhhc2hDb25zKCkudXBkYXRlKHRvQnl0ZXMobXNnKSkuZGlnZXN0KCk7XG4gICAgY29uc3QgdG1wID0gaGFzaENvbnMoKTtcbiAgICBoYXNoQy5vdXRwdXRMZW4gPSB0bXAub3V0cHV0TGVuO1xuICAgIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICAgIGhhc2hDLmNyZWF0ZSA9ICgpID0+IGhhc2hDb25zKCk7XG4gICAgcmV0dXJuIGhhc2hDO1xufVxuZXhwb3J0cy53cmFwQ29uc3RydWN0b3IgPSB3cmFwQ29uc3RydWN0b3I7XG5mdW5jdGlvbiB3cmFwQ29uc3RydWN0b3JXaXRoT3B0cyhoYXNoQ29ucykge1xuICAgIGNvbnN0IGhhc2hDID0gKG1zZywgb3B0cykgPT4gaGFzaENvbnMob3B0cykudXBkYXRlKHRvQnl0ZXMobXNnKSkuZGlnZXN0KCk7XG4gICAgY29uc3QgdG1wID0gaGFzaENvbnMoe30pO1xuICAgIGhhc2hDLm91dHB1dExlbiA9IHRtcC5vdXRwdXRMZW47XG4gICAgaGFzaEMuYmxvY2tMZW4gPSB0bXAuYmxvY2tMZW47XG4gICAgaGFzaEMuY3JlYXRlID0gKG9wdHMpID0+IGhhc2hDb25zKG9wdHMpO1xuICAgIHJldHVybiBoYXNoQztcbn1cbmV4cG9ydHMud3JhcENvbnN0cnVjdG9yV2l0aE9wdHMgPSB3cmFwQ29uc3RydWN0b3JXaXRoT3B0cztcbmZ1bmN0aW9uIHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzKGhhc2hDb25zKSB7XG4gICAgY29uc3QgaGFzaEMgPSAobXNnLCBvcHRzKSA9PiBoYXNoQ29ucyhvcHRzKS51cGRhdGUodG9CeXRlcyhtc2cpKS5kaWdlc3QoKTtcbiAgICBjb25zdCB0bXAgPSBoYXNoQ29ucyh7fSk7XG4gICAgaGFzaEMub3V0cHV0TGVuID0gdG1wLm91dHB1dExlbjtcbiAgICBoYXNoQy5ibG9ja0xlbiA9IHRtcC5ibG9ja0xlbjtcbiAgICBoYXNoQy5jcmVhdGUgPSAob3B0cykgPT4gaGFzaENvbnMob3B0cyk7XG4gICAgcmV0dXJuIGhhc2hDO1xufVxuZXhwb3J0cy53cmFwWE9GQ29uc3RydWN0b3JXaXRoT3B0cyA9IHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzO1xuLyoqXG4gKiBTZWN1cmUgUFJORy4gVXNlcyBgY3J5cHRvLmdldFJhbmRvbVZhbHVlc2AsIHdoaWNoIGRlZmVycyB0byBPUy5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tQnl0ZXMoYnl0ZXNMZW5ndGggPSAzMikge1xuICAgIGlmIChjcnlwdG9fMS5jcnlwdG8gJiYgdHlwZW9mIGNyeXB0b18xLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXNMZW5ndGgpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIG11c3QgYmUgZGVmaW5lZCcpO1xufVxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IHJhbmRvbUJ5dGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.cjs.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.cjs.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar ed25519 = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/./node_modules/@noble/curves/ed25519.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\nvar sha256 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha256.js\");\nvar borsh = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nvar BufferLayout = __webpack_require__(/*! @solana/buffer-layout */ \"(ssr)/./node_modules/@solana/buffer-layout/lib/Layout.js\");\nvar bigintBuffer = __webpack_require__(/*! bigint-buffer */ \"(ssr)/./node_modules/bigint-buffer/dist/node.js\");\nvar require$$0 = __webpack_require__(/*! util */ \"util\");\nvar require$$0$1 = __webpack_require__(/*! http */ \"http\");\nvar require$$0$2 = __webpack_require__(/*! https */ \"https\");\nvar superstruct = __webpack_require__(/*! superstruct */ \"(ssr)/./node_modules/superstruct/lib/index.cjs\");\nvar RpcClient = __webpack_require__(/*! jayson/lib/client/browser */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/client/browser/index.js\");\nvar nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.js\");\nvar RpcWebSocketCommonClient = __webpack_require__(/*! rpc-websockets/dist/lib/client */ \"(ssr)/./node_modules/rpc-websockets/dist/lib/client.js\");\nvar WebsocketFactory = __webpack_require__(/*! rpc-websockets/dist/lib/client/websocket */ \"(ssr)/./node_modules/rpc-websockets/dist/lib/client/websocket.js\");\nvar sha3 = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@noble/hashes/sha3.js\");\nvar secp256k1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\n\nfunction _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }\n\nfunction _interopNamespaceCompat(e) {\n  if (e && typeof e === 'object' && 'default' in e) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar BN__default = /*#__PURE__*/_interopDefaultCompat(BN);\nvar bs58__default = /*#__PURE__*/_interopDefaultCompat(bs58);\nvar BufferLayout__namespace = /*#__PURE__*/_interopNamespaceCompat(BufferLayout);\nvar require$$0__default = /*#__PURE__*/_interopDefaultCompat(require$$0);\nvar require$$0__default$1 = /*#__PURE__*/_interopDefaultCompat(require$$0$1);\nvar require$$0__default$2 = /*#__PURE__*/_interopDefaultCompat(require$$0$2);\nvar RpcClient__default = /*#__PURE__*/_interopDefaultCompat(RpcClient);\nvar nodeFetch__namespace = /*#__PURE__*/_interopNamespaceCompat(nodeFetch);\nvar RpcWebSocketCommonClient__default = /*#__PURE__*/_interopDefaultCompat(RpcWebSocketCommonClient);\nvar WebsocketFactory__default = /*#__PURE__*/_interopDefaultCompat(WebsocketFactory);\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.ed25519.verify;\n\nconst toBuffer = arr => {\n  if (buffer.Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return buffer.Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return buffer.Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return buffer.Buffer.from(borsh.serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return borsh.deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return borsh.deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _class;\nlet _Symbol$toStringTag;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58__default.default.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN__default.default(decoded);\n      } else {\n        this._bn = new BN__default.default(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58__default.default.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(buffer.Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = buffer.Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer$1 = buffer.Buffer.concat([fromPublicKey.toBuffer(), buffer.Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256.sha256(buffer$1);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer$1 = buffer.Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer$1 = buffer.Buffer.concat([buffer$1, toBuffer(seed)]);\n    });\n    buffer$1 = buffer.Buffer.concat([buffer$1, programId.toBuffer(), buffer.Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256.sha256(buffer$1);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(buffer.Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_class = PublicKey;\nPublicKey.default = new _class('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return buffer.Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout__namespace.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout__namespace.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout__namespace.struct([BufferLayout__namespace.u32('length'), BufferLayout__namespace.u32('lengthPadding'), BufferLayout__namespace.blob(BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: buffer.Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout__namespace.u32().span + BufferLayout__namespace.u32().span + buffer.Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout__namespace.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout__namespace.struct([BufferLayout__namespace.ns64('unixTimestamp'), BufferLayout__namespace.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout__namespace.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout__namespace.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout__namespace.struct([BufferLayout__namespace.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58__default.default.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58__default.default.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58__default.default.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: buffer.Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: buffer.Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = buffer.Buffer.alloc(PACKET_DATA_SIZE);\n    buffer.Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u8('programIdIndex'), BufferLayout__namespace.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout__namespace.seq(BufferLayout__namespace.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout__namespace.blob(instruction.dataLength.length, 'dataLength'), BufferLayout__namespace.seq(BufferLayout__namespace.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout__namespace.struct([BufferLayout__namespace.blob(1, 'numRequiredSignatures'), BufferLayout__namespace.blob(1, 'numReadonlySignedAccounts'), BufferLayout__namespace.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout__namespace.blob(keyCount.length, 'keyCount'), BufferLayout__namespace.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: buffer.Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: buffer.Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: buffer.Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: buffer.Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58__default.default.decode(this.recentBlockhash)\n    };\n    let signData = buffer.Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer$1) {\n    // Slice up wire data\n    let byteArray = [...buffer$1];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(buffer.Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58__default.default.encode(buffer.Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58__default.default.encode(buffer.Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u8('prefix'), BufferLayout__namespace.struct([BufferLayout__namespace.u8('numRequiredSignatures'), BufferLayout__namespace.u8('numReadonlySignedAccounts'), BufferLayout__namespace.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout__namespace.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout__namespace.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout__namespace.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout__namespace.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout__namespace.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout__namespace.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58__default.default.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u8('programIdIndex'), BufferLayout__namespace.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout__namespace.seq(BufferLayout__namespace.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout__namespace.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout__namespace.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout__namespace.struct([publicKey('accountKey'), BufferLayout__namespace.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout__namespace.seq(BufferLayout__namespace.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout__namespace.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout__namespace.seq(BufferLayout__namespace.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58__default.default.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = buffer.Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = buffer.Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58__default.default.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = buffer.Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = buffer.Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    buffer.Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        buffer.Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer$1) {\n    // Slice up wire data\n    let byteArray = [...buffer$1];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58__default.default.encode(buffer.Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58__default.default.encode(DEFAULT_SIGNATURE) ? null : bs58__default.default.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58__default.default.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout__namespace.struct([BufferLayout__namespace.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout__namespace.seq(signature(), this.signatures.length, 'signatures'), BufferLayout__namespace.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = buffer.Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout__namespace.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u32('version'), BufferLayout__namespace.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout__namespace.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = BufferLayout.blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer$1, offset) => {\n    const src = decode(buffer$1, offset);\n    return bigintBuffer.toBigIntLE(buffer.Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = bigintBuffer.toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout__namespace.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('lamports'), BufferLayout__namespace.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout__namespace.ns64('lamports'), BufferLayout__namespace.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout__namespace.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.u32('offset'), BufferLayout__namespace.u32('bytesLength'), BufferLayout__namespace.u32('bytesLengthPadding'), BufferLayout__namespace.seq(BufferLayout__namespace.u8('byte'), BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = buffer.Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')]);\n      const data = buffer.Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar agentkeepalive = {exports: {}};\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nvar ms$2 = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n/*!\n * humanize-ms - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar util = require$$0__default.default;\nvar ms$1 = ms$2;\n\nvar humanizeMs = function (t) {\n  if (typeof t === 'number') return t;\n  var r = ms$1(t);\n  if (r === undefined) {\n    var err = new Error(util.format('humanize-ms(%j) result undefined', t));\n    console.warn(err.stack);\n  }\n  return r;\n};\n\nvar constants = {\n  // agent\n  CURRENT_ID: Symbol('agentkeepalive#currentId'),\n  CREATE_ID: Symbol('agentkeepalive#createId'),\n  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\n  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\n  // socket\n  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\n  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\n  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\n};\n\nconst OriginalAgent = require$$0__default$1.default.Agent;\nconst ms = humanizeMs;\nconst debug = require$$0__default.default.debuglog('agentkeepalive');\nconst {\n  INIT_SOCKET: INIT_SOCKET$1,\n  CURRENT_ID,\n  CREATE_ID,\n  SOCKET_CREATED_TIME,\n  SOCKET_NAME,\n  SOCKET_REQUEST_COUNT,\n  SOCKET_REQUEST_FINISHED_COUNT,\n} = constants;\n\n// OriginalAgent come from\n// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\n// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\n\n// node <= 10\nlet defaultTimeoutListenerCount = 1;\nconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\nif (majorVersion >= 11 && majorVersion <= 12) {\n  defaultTimeoutListenerCount = 2;\n} else if (majorVersion >= 13) {\n  defaultTimeoutListenerCount = 3;\n}\n\nfunction deprecate(message) {\n  console.log('[agentkeepalive:deprecated] %s', message);\n}\n\nclass Agent extends OriginalAgent {\n  constructor(options) {\n    options = options || {};\n    options.keepAlive = options.keepAlive !== false;\n    // default is keep-alive and 4s free socket timeout\n    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\n    if (options.freeSocketTimeout === undefined) {\n      options.freeSocketTimeout = 4000;\n    }\n    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.keepAliveTimeout) {\n      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.keepAliveTimeout;\n      delete options.keepAliveTimeout;\n    }\n    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.freeSocketKeepAliveTimeout) {\n      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\n      delete options.freeSocketKeepAliveTimeout;\n    }\n\n    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\n    // By default is double free socket timeout.\n    if (options.timeout === undefined) {\n      // make sure socket default inactivity timeout >= 8s\n      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\n    }\n\n    // support humanize format\n    options.timeout = ms(options.timeout);\n    options.freeSocketTimeout = ms(options.freeSocketTimeout);\n    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\n\n    super(options);\n\n    this[CURRENT_ID] = 0;\n\n    // create socket success counter\n    this.createSocketCount = 0;\n    this.createSocketCountLastCheck = 0;\n\n    this.createSocketErrorCount = 0;\n    this.createSocketErrorCountLastCheck = 0;\n\n    this.closeSocketCount = 0;\n    this.closeSocketCountLastCheck = 0;\n\n    // socket error event count\n    this.errorSocketCount = 0;\n    this.errorSocketCountLastCheck = 0;\n\n    // request finished counter\n    this.requestCount = 0;\n    this.requestCountLastCheck = 0;\n\n    // including free socket timeout counter\n    this.timeoutSocketCount = 0;\n    this.timeoutSocketCountLastCheck = 0;\n\n    this.on('free', socket => {\n      // https://github.com/nodejs/node/pull/32000\n      // Node.js native agent will check socket timeout eqs agent.options.timeout.\n      // Use the ttl or freeSocketTimeout to overwrite.\n      const timeout = this.calcSocketTimeout(socket);\n      if (timeout > 0 && socket.timeout !== timeout) {\n        socket.setTimeout(timeout);\n      }\n    });\n  }\n\n  get freeSocketKeepAliveTimeout() {\n    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\n    return this.options.freeSocketTimeout;\n  }\n\n  get timeout() {\n    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\n    return this.options.timeout;\n  }\n\n  get socketActiveTTL() {\n    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\n    return this.options.socketActiveTTL;\n  }\n\n  calcSocketTimeout(socket) {\n    /**\n     * return <= 0: should free socket\n     * return > 0: should update socket timeout\n     * return undefined: not find custom timeout\n     */\n    let freeSocketTimeout = this.options.freeSocketTimeout;\n    const socketActiveTTL = this.options.socketActiveTTL;\n    if (socketActiveTTL) {\n      // check socketActiveTTL\n      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\n      const diff = socketActiveTTL - aliveTime;\n      if (diff <= 0) {\n        return diff;\n      }\n      if (freeSocketTimeout && diff < freeSocketTimeout) {\n        freeSocketTimeout = diff;\n      }\n    }\n    // set freeSocketTimeout\n    if (freeSocketTimeout) {\n      // set free keepalive timer\n      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\n      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\n      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\n      return customFreeSocketTimeout || freeSocketTimeout;\n    }\n  }\n\n  keepSocketAlive(socket) {\n    const result = super.keepSocketAlive(socket);\n    // should not keepAlive, do nothing\n    if (!result) return result;\n\n    const customTimeout = this.calcSocketTimeout(socket);\n    if (typeof customTimeout === 'undefined') {\n      return true;\n    }\n    if (customTimeout <= 0) {\n      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\n      return false;\n    }\n    if (socket.timeout !== customTimeout) {\n      socket.setTimeout(customTimeout);\n    }\n    return true;\n  }\n\n  // only call on addRequest\n  reuseSocket(...args) {\n    // reuseSocket(socket, req)\n    super.reuseSocket(...args);\n    const socket = args[0];\n    const req = args[1];\n    req.reusedSocket = true;\n    const agentTimeout = this.options.timeout;\n    if (getSocketTimeout(socket) !== agentTimeout) {\n      // reset timeout before use\n      socket.setTimeout(agentTimeout);\n      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\n    }\n    socket[SOCKET_REQUEST_COUNT]++;\n    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      getSocketTimeout(socket));\n  }\n\n  [CREATE_ID]() {\n    const id = this[CURRENT_ID]++;\n    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\n    return id;\n  }\n\n  [INIT_SOCKET$1](socket, options) {\n    // bugfix here.\n    // https on node 8, 10 won't set agent.options.timeout by default\n    // TODO: need to fix on node itself\n    if (options.timeout) {\n      const timeout = getSocketTimeout(socket);\n      if (!timeout) {\n        socket.setTimeout(options.timeout);\n      }\n    }\n\n    if (this.options.keepAlive) {\n      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\n      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\n      socket.setNoDelay(true);\n    }\n    this.createSocketCount++;\n    if (this.options.socketActiveTTL) {\n      socket[SOCKET_CREATED_TIME] = Date.now();\n    }\n    // don't show the hole '-----BEGIN CERTIFICATE----' key string\n    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\n    socket[SOCKET_REQUEST_COUNT] = 1;\n    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\n    installListeners(this, socket, options);\n  }\n\n  createConnection(options, oncreate) {\n    let called = false;\n    const onNewCreate = (err, socket) => {\n      if (called) return;\n      called = true;\n\n      if (err) {\n        this.createSocketErrorCount++;\n        return oncreate(err);\n      }\n      this[INIT_SOCKET$1](socket, options);\n      oncreate(err, socket);\n    };\n\n    const newSocket = super.createConnection(options, onNewCreate);\n    if (newSocket) onNewCreate(null, newSocket);\n    return newSocket;\n  }\n\n  get statusChanged() {\n    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\n      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\n      this.closeSocketCount !== this.closeSocketCountLastCheck ||\n      this.errorSocketCount !== this.errorSocketCountLastCheck ||\n      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\n      this.requestCount !== this.requestCountLastCheck;\n    if (changed) {\n      this.createSocketCountLastCheck = this.createSocketCount;\n      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\n      this.closeSocketCountLastCheck = this.closeSocketCount;\n      this.errorSocketCountLastCheck = this.errorSocketCount;\n      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\n      this.requestCountLastCheck = this.requestCount;\n    }\n    return changed;\n  }\n\n  getCurrentStatus() {\n    return {\n      createSocketCount: this.createSocketCount,\n      createSocketErrorCount: this.createSocketErrorCount,\n      closeSocketCount: this.closeSocketCount,\n      errorSocketCount: this.errorSocketCount,\n      timeoutSocketCount: this.timeoutSocketCount,\n      requestCount: this.requestCount,\n      freeSockets: inspect(this.freeSockets),\n      sockets: inspect(this.sockets),\n      requests: inspect(this.requests),\n    };\n  }\n}\n\n// node 8 don't has timeout attribute on socket\n// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\nfunction getSocketTimeout(socket) {\n  return socket.timeout || socket._idleTimeout;\n}\n\nfunction installListeners(agent, socket, options) {\n  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\n\n  // listener socket events: close, timeout, error, free\n  function onFree() {\n    // create and socket.emit('free') logic\n    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\n    // no req on the socket, it should be the new socket\n    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\n\n    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\n    agent.requestCount++;\n    debug('%s(requests: %s, finished: %s) free',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\n    // should reuse on pedding requests?\n    const name = agent.getName(options);\n    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\n      // will be reuse on agent free listener\n      socket[SOCKET_REQUEST_COUNT]++;\n      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    }\n  }\n  socket.on('free', onFree);\n\n  function onClose(isError) {\n    debug('%s(requests: %s, finished: %s) close, isError: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\n    agent.closeSocketCount++;\n  }\n  socket.on('close', onClose);\n\n  // start socket timeout handler\n  function onTimeout() {\n    // onTimeout and emitRequestTimeout(_http_client.js)\n    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\n    const listenerCount = socket.listeners('timeout').length;\n    // node <= 10, default listenerCount is 1, onTimeout\n    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\n    // node >= 13, default listenerCount is 3, onTimeout,\n    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\n    //   and emitRequestTimeout\n    const timeout = getSocketTimeout(socket);\n    const req = socket._httpMessage;\n    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\n    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\n    if (debug.enabled) {\n      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\n    }\n    agent.timeoutSocketCount++;\n    const name = agent.getName(options);\n    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\n      // free socket timeout, destroy quietly\n      socket.destroy();\n      // Remove it from freeSockets list immediately to prevent new requests\n      // from being sent through this socket.\n      agent.removeSocket(socket, options);\n      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\n    } else {\n      // if there is no any request socket timeout handler,\n      // agent need to handle socket timeout itself.\n      //\n      // custom request socket timeout handle logic must follow these rules:\n      //  1. Destroy socket first\n      //  2. Must emit socket 'agentRemove' event tell agent remove socket\n      //     from freeSockets list immediately.\n      //     Otherise you may be get 'socket hang up' error when reuse\n      //     free socket and timeout happen in the same time.\n      if (reqTimeoutListenerCount === 0) {\n        const error = new Error('Socket timeout');\n        error.code = 'ERR_SOCKET_TIMEOUT';\n        error.timeout = timeout;\n        // must manually call socket.end() or socket.destroy() to end the connection.\n        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\n        socket.destroy(error);\n        agent.removeSocket(socket, options);\n        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\n      }\n    }\n  }\n  socket.on('timeout', onTimeout);\n\n  function onError(err) {\n    const listenerCount = socket.listeners('error').length;\n    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      err, listenerCount);\n    agent.errorSocketCount++;\n    if (listenerCount === 1) {\n      // if socket don't contain error event handler, don't catch it, emit it again\n      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\n      socket.removeListener('error', onError);\n      socket.emit('error', err);\n    }\n  }\n  socket.on('error', onError);\n\n  function onRemove() {\n    debug('%s(requests: %s, finished: %s) agentRemove',\n      socket[SOCKET_NAME],\n      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    // We need this function for cases like HTTP 'upgrade'\n    // (defined by WebSockets) where we need to remove a socket from the\n    // pool because it'll be locked up indefinitely\n    socket.removeListener('close', onClose);\n    socket.removeListener('error', onError);\n    socket.removeListener('free', onFree);\n    socket.removeListener('timeout', onTimeout);\n    socket.removeListener('agentRemove', onRemove);\n  }\n  socket.on('agentRemove', onRemove);\n}\n\nvar agent = Agent;\n\nfunction inspect(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key].length;\n  }\n  return res;\n}\n\nconst OriginalHttpsAgent = require$$0__default$2.default.Agent;\nconst HttpAgent = agent;\nconst {\n  INIT_SOCKET,\n  CREATE_HTTPS_CONNECTION,\n} = constants;\n\nlet HttpsAgent$1 = class HttpsAgent extends HttpAgent {\n  constructor(options) {\n    super(options);\n\n    this.defaultPort = 443;\n    this.protocol = 'https:';\n    this.maxCachedSessions = this.options.maxCachedSessions;\n    /* istanbul ignore next */\n    if (this.maxCachedSessions === undefined) {\n      this.maxCachedSessions = 100;\n    }\n\n    this._sessionCache = {\n      map: {},\n      list: [],\n    };\n  }\n\n  createConnection(options, oncreate) {\n    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);\n    this[INIT_SOCKET](socket, options);\n    return socket;\n  }\n};\n\n// https://github.com/nodejs/node/blob/master/lib/https.js#L89\nHttpsAgent$1.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\n\n[\n  'getName',\n  '_getSession',\n  '_cacheSession',\n  // https://github.com/nodejs/node/pull/4982\n  '_evictSession',\n].forEach(function(method) {\n  /* istanbul ignore next */\n  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\n    HttpsAgent$1.prototype[method] = OriginalHttpsAgent.prototype[method];\n  }\n});\n\nvar https_agent = HttpsAgent$1;\n\nagentkeepalive.exports = agent;\nvar HttpsAgent = agentkeepalive.exports.HttpsAgent = https_agent;\nagentkeepalive.exports.constants = constants;\n\nvar agentkeepaliveExports = agentkeepalive.exports;\nvar HttpKeepAliveAgent = /*@__PURE__*/getDefaultExportFromCjs(agentkeepaliveExports);\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\nvar fetchImpl = typeof globalThis.fetch === 'function' ?\n// The Fetch API is supported experimentally in Node 17.5+ and natively in Node 18+.\nglobalThis.fetch :\n// Otherwise use the polyfill.\nasync function (input, init) {\n  const processedInput = typeof input === 'string' && input.slice(0, 2) === '//' ? 'https:' + input : input;\n  return await nodeFetch__namespace.default(processedInput, init);\n};\n\nclass RpcWebSocketClient extends RpcWebSocketCommonClient__default.default {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebsocketFactory__default.default(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout__namespace.struct([BufferLayout__namespace.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('typeIndex'), u64('deactivationSlot'), BufferLayout__namespace.nu64('lastExtendedSlot'), BufferLayout__namespace.u8('lastExtendedStartIndex'), BufferLayout__namespace.u8(),\n  // option\n  BufferLayout__namespace.seq(publicKey(), BufferLayout__namespace.offset(BufferLayout__namespace.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = superstruct.coerce(superstruct.instance(PublicKey), superstruct.string(), value => new PublicKey(value));\nconst RawAccountDataResult = superstruct.tuple([superstruct.string(), superstruct.literal('base64')]);\nconst BufferFromRawAccountData = superstruct.coerce(superstruct.instance(buffer.Buffer), RawAccountDataResult, value => buffer.Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return superstruct.union([superstruct.type({\n    jsonrpc: superstruct.literal('2.0'),\n    id: superstruct.string(),\n    result\n  }), superstruct.type({\n    jsonrpc: superstruct.literal('2.0'),\n    id: superstruct.string(),\n    error: superstruct.type({\n      code: superstruct.unknown(),\n      message: superstruct.string(),\n      data: superstruct.optional(superstruct.any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(superstruct.unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return superstruct.coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: superstruct.create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(superstruct.type({\n    context: superstruct.type({\n      slot: superstruct.number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return superstruct.type({\n    context: superstruct.type({\n      slot: superstruct.number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58__default.default.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = superstruct.type({\n  foundation: superstruct.number(),\n  foundationTerm: superstruct.number(),\n  initial: superstruct.number(),\n  taper: superstruct.number(),\n  terminal: superstruct.number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(superstruct.array(superstruct.nullable(superstruct.type({\n  epoch: superstruct.number(),\n  effectiveSlot: superstruct.number(),\n  amount: superstruct.number(),\n  postBalance: superstruct.number(),\n  commission: superstruct.optional(superstruct.nullable(superstruct.number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = superstruct.array(superstruct.type({\n  slot: superstruct.number(),\n  prioritizationFee: superstruct.number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = superstruct.type({\n  total: superstruct.number(),\n  validator: superstruct.number(),\n  foundation: superstruct.number(),\n  epoch: superstruct.number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = superstruct.type({\n  epoch: superstruct.number(),\n  slotIndex: superstruct.number(),\n  slotsInEpoch: superstruct.number(),\n  absoluteSlot: superstruct.number(),\n  blockHeight: superstruct.optional(superstruct.number()),\n  transactionCount: superstruct.optional(superstruct.number())\n});\nconst GetEpochScheduleResult = superstruct.type({\n  slotsPerEpoch: superstruct.number(),\n  leaderScheduleSlotOffset: superstruct.number(),\n  warmup: superstruct.boolean(),\n  firstNormalEpoch: superstruct.number(),\n  firstNormalSlot: superstruct.number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = superstruct.record(superstruct.string(), superstruct.array(superstruct.number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = superstruct.nullable(superstruct.union([superstruct.type({}), superstruct.string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = superstruct.type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = superstruct.literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = superstruct.type({\n  'solana-core': superstruct.string(),\n  'feature-set': superstruct.optional(superstruct.number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(superstruct.type({\n  err: superstruct.nullable(superstruct.union([superstruct.type({}), superstruct.string()])),\n  logs: superstruct.nullable(superstruct.array(superstruct.string())),\n  accounts: superstruct.optional(superstruct.nullable(superstruct.array(superstruct.nullable(superstruct.type({\n    executable: superstruct.boolean(),\n    owner: superstruct.string(),\n    lamports: superstruct.number(),\n    data: superstruct.array(superstruct.string()),\n    rentEpoch: superstruct.optional(superstruct.number())\n  }))))),\n  unitsConsumed: superstruct.optional(superstruct.number()),\n  returnData: superstruct.optional(superstruct.nullable(superstruct.type({\n    programId: superstruct.string(),\n    data: superstruct.tuple([superstruct.string(), superstruct.literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(superstruct.type({\n  byIdentity: superstruct.record(superstruct.string(), superstruct.array(superstruct.number())),\n  range: superstruct.type({\n    firstSlot: superstruct.number(),\n    lastSlot: superstruct.number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent == null) {\n      {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof require$$0$2.Agent)) {\n          throw new Error('The endpoint `' + url + '` can only be paired with an `https.Agent`. You have, instead, supplied an ' + '`http.Agent` through `httpAgent`.');\n        } else if (!isHttps && httpAgent instanceof require$$0$2.Agent) {\n          throw new Error('The endpoint `' + url + '` can only be paired with an `http.Agent`. You have, instead, supplied an ' + '`https.Agent` through `httpAgent`.');\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient__default.default(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(superstruct.number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(superstruct.type({\n  total: superstruct.number(),\n  circulating: superstruct.number(),\n  nonCirculating: superstruct.number(),\n  nonCirculatingAccounts: superstruct.array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = superstruct.type({\n  amount: superstruct.string(),\n  uiAmount: superstruct.nullable(superstruct.number()),\n  decimals: superstruct.number(),\n  uiAmountString: superstruct.optional(superstruct.string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(superstruct.array(superstruct.type({\n  address: PublicKeyFromString,\n  amount: superstruct.string(),\n  uiAmount: superstruct.nullable(superstruct.number()),\n  decimals: superstruct.number(),\n  uiAmountString: superstruct.optional(superstruct.string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(superstruct.array(superstruct.type({\n  pubkey: PublicKeyFromString,\n  account: superstruct.type({\n    executable: superstruct.boolean(),\n    owner: PublicKeyFromString,\n    lamports: superstruct.number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: superstruct.number()\n  })\n})));\nconst ParsedAccountDataResult = superstruct.type({\n  program: superstruct.string(),\n  parsed: superstruct.unknown(),\n  space: superstruct.number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(superstruct.array(superstruct.type({\n  pubkey: PublicKeyFromString,\n  account: superstruct.type({\n    executable: superstruct.boolean(),\n    owner: PublicKeyFromString,\n    lamports: superstruct.number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: superstruct.number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(superstruct.array(superstruct.type({\n  lamports: superstruct.number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = superstruct.type({\n  executable: superstruct.boolean(),\n  owner: PublicKeyFromString,\n  lamports: superstruct.number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: superstruct.number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = superstruct.type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = superstruct.coerce(superstruct.union([superstruct.instance(buffer.Buffer), ParsedAccountDataResult]), superstruct.union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return superstruct.create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = superstruct.type({\n  executable: superstruct.boolean(),\n  owner: PublicKeyFromString,\n  lamports: superstruct.number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: superstruct.number()\n});\nconst KeyedParsedAccountInfoResult = superstruct.type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = superstruct.type({\n  state: superstruct.union([superstruct.literal('active'), superstruct.literal('inactive'), superstruct.literal('activating'), superstruct.literal('deactivating')]),\n  active: superstruct.number(),\n  inactive: superstruct.number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(superstruct.array(superstruct.type({\n  signature: superstruct.string(),\n  slot: superstruct.number(),\n  err: TransactionErrorResult,\n  memo: superstruct.nullable(superstruct.string()),\n  blockTime: superstruct.optional(superstruct.nullable(superstruct.number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(superstruct.array(superstruct.type({\n  signature: superstruct.string(),\n  slot: superstruct.number(),\n  err: TransactionErrorResult,\n  memo: superstruct.nullable(superstruct.string()),\n  blockTime: superstruct.optional(superstruct.nullable(superstruct.number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = superstruct.type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = superstruct.type({\n  parent: superstruct.number(),\n  slot: superstruct.number(),\n  root: superstruct.number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = superstruct.union([superstruct.type({\n  type: superstruct.union([superstruct.literal('firstShredReceived'), superstruct.literal('completed'), superstruct.literal('optimisticConfirmation'), superstruct.literal('root')]),\n  slot: superstruct.number(),\n  timestamp: superstruct.number()\n}), superstruct.type({\n  type: superstruct.literal('createdBank'),\n  parent: superstruct.number(),\n  slot: superstruct.number(),\n  timestamp: superstruct.number()\n}), superstruct.type({\n  type: superstruct.literal('frozen'),\n  slot: superstruct.number(),\n  timestamp: superstruct.number(),\n  stats: superstruct.type({\n    numTransactionEntries: superstruct.number(),\n    numSuccessfulTransactions: superstruct.number(),\n    numFailedTransactions: superstruct.number(),\n    maxTransactionsPerEntry: superstruct.number()\n  })\n}), superstruct.type({\n  type: superstruct.literal('dead'),\n  slot: superstruct.number(),\n  timestamp: superstruct.number(),\n  err: superstruct.string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: notificationResultAndContext(superstruct.union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = superstruct.type({\n  subscription: superstruct.number(),\n  result: superstruct.number()\n});\nconst ContactInfoResult = superstruct.type({\n  pubkey: superstruct.string(),\n  gossip: superstruct.nullable(superstruct.string()),\n  tpu: superstruct.nullable(superstruct.string()),\n  rpc: superstruct.nullable(superstruct.string()),\n  version: superstruct.nullable(superstruct.string())\n});\nconst VoteAccountInfoResult = superstruct.type({\n  votePubkey: superstruct.string(),\n  nodePubkey: superstruct.string(),\n  activatedStake: superstruct.number(),\n  epochVoteAccount: superstruct.boolean(),\n  epochCredits: superstruct.array(superstruct.tuple([superstruct.number(), superstruct.number(), superstruct.number()])),\n  commission: superstruct.number(),\n  lastVote: superstruct.number(),\n  rootSlot: superstruct.nullable(superstruct.number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(superstruct.type({\n  current: superstruct.array(VoteAccountInfoResult),\n  delinquent: superstruct.array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = superstruct.union([superstruct.literal('processed'), superstruct.literal('confirmed'), superstruct.literal('finalized')]);\nconst SignatureStatusResponse = superstruct.type({\n  slot: superstruct.number(),\n  confirmations: superstruct.nullable(superstruct.number()),\n  err: TransactionErrorResult,\n  confirmationStatus: superstruct.optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(superstruct.array(superstruct.nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(superstruct.number());\nconst AddressTableLookupStruct = superstruct.type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: superstruct.array(superstruct.number()),\n  readonlyIndexes: superstruct.array(superstruct.number())\n});\nconst ConfirmedTransactionResult = superstruct.type({\n  signatures: superstruct.array(superstruct.string()),\n  message: superstruct.type({\n    accountKeys: superstruct.array(superstruct.string()),\n    header: superstruct.type({\n      numRequiredSignatures: superstruct.number(),\n      numReadonlySignedAccounts: superstruct.number(),\n      numReadonlyUnsignedAccounts: superstruct.number()\n    }),\n    instructions: superstruct.array(superstruct.type({\n      accounts: superstruct.array(superstruct.number()),\n      data: superstruct.string(),\n      programIdIndex: superstruct.number()\n    })),\n    recentBlockhash: superstruct.string(),\n    addressTableLookups: superstruct.optional(superstruct.array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = superstruct.type({\n  pubkey: PublicKeyFromString,\n  signer: superstruct.boolean(),\n  writable: superstruct.boolean(),\n  source: superstruct.optional(superstruct.union([superstruct.literal('transaction'), superstruct.literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = superstruct.type({\n  accountKeys: superstruct.array(AnnotatedAccountKey),\n  signatures: superstruct.array(superstruct.string())\n});\nconst ParsedInstructionResult = superstruct.type({\n  parsed: superstruct.unknown(),\n  program: superstruct.string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = superstruct.type({\n  accounts: superstruct.array(PublicKeyFromString),\n  data: superstruct.string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = superstruct.union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = superstruct.union([superstruct.type({\n  parsed: superstruct.unknown(),\n  program: superstruct.string(),\n  programId: superstruct.string()\n}), superstruct.type({\n  accounts: superstruct.array(superstruct.string()),\n  data: superstruct.string(),\n  programId: superstruct.string()\n})]);\nconst ParsedOrRawInstruction = superstruct.coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return superstruct.create(value, RawInstructionResult);\n  } else {\n    return superstruct.create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = superstruct.type({\n  signatures: superstruct.array(superstruct.string()),\n  message: superstruct.type({\n    accountKeys: superstruct.array(AnnotatedAccountKey),\n    instructions: superstruct.array(ParsedOrRawInstruction),\n    recentBlockhash: superstruct.string(),\n    addressTableLookups: superstruct.optional(superstruct.nullable(superstruct.array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = superstruct.type({\n  accountIndex: superstruct.number(),\n  mint: superstruct.string(),\n  owner: superstruct.optional(superstruct.string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = superstruct.type({\n  writable: superstruct.array(PublicKeyFromString),\n  readonly: superstruct.array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = superstruct.type({\n  err: TransactionErrorResult,\n  fee: superstruct.number(),\n  innerInstructions: superstruct.optional(superstruct.nullable(superstruct.array(superstruct.type({\n    index: superstruct.number(),\n    instructions: superstruct.array(superstruct.type({\n      accounts: superstruct.array(superstruct.number()),\n      data: superstruct.string(),\n      programIdIndex: superstruct.number()\n    }))\n  })))),\n  preBalances: superstruct.array(superstruct.number()),\n  postBalances: superstruct.array(superstruct.number()),\n  logMessages: superstruct.optional(superstruct.nullable(superstruct.array(superstruct.string()))),\n  preTokenBalances: superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),\n  postTokenBalances: superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),\n  loadedAddresses: superstruct.optional(LoadedAddressesResult),\n  computeUnitsConsumed: superstruct.optional(superstruct.number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = superstruct.type({\n  err: TransactionErrorResult,\n  fee: superstruct.number(),\n  innerInstructions: superstruct.optional(superstruct.nullable(superstruct.array(superstruct.type({\n    index: superstruct.number(),\n    instructions: superstruct.array(ParsedOrRawInstruction)\n  })))),\n  preBalances: superstruct.array(superstruct.number()),\n  postBalances: superstruct.array(superstruct.number()),\n  logMessages: superstruct.optional(superstruct.nullable(superstruct.array(superstruct.string()))),\n  preTokenBalances: superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),\n  postTokenBalances: superstruct.optional(superstruct.nullable(superstruct.array(TokenBalanceResult))),\n  loadedAddresses: superstruct.optional(LoadedAddressesResult),\n  computeUnitsConsumed: superstruct.optional(superstruct.number())\n});\nconst TransactionVersionStruct = superstruct.union([superstruct.literal(0), superstruct.literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = superstruct.type({\n  pubkey: superstruct.string(),\n  lamports: superstruct.number(),\n  postBalance: superstruct.nullable(superstruct.number()),\n  rewardType: superstruct.nullable(superstruct.string()),\n  commission: superstruct.optional(superstruct.nullable(superstruct.number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  transactions: superstruct.array(superstruct.type({\n    transaction: ConfirmedTransactionResult,\n    meta: superstruct.nullable(ConfirmedTransactionMetaResult),\n    version: superstruct.optional(TransactionVersionStruct)\n  })),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  transactions: superstruct.array(superstruct.type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: superstruct.nullable(ConfirmedTransactionMetaResult),\n    version: superstruct.optional(TransactionVersionStruct)\n  })),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  transactions: superstruct.array(superstruct.type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: superstruct.nullable(ParsedConfirmedTransactionMetaResult),\n    version: superstruct.optional(TransactionVersionStruct)\n  })),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  transactions: superstruct.array(superstruct.type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: superstruct.nullable(ParsedConfirmedTransactionMetaResult),\n    version: superstruct.optional(TransactionVersionStruct)\n  })),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number()),\n  blockHeight: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  transactions: superstruct.array(superstruct.type({\n    transaction: ConfirmedTransactionResult,\n    meta: superstruct.nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: superstruct.optional(superstruct.array(RewardsResult)),\n  blockTime: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  blockhash: superstruct.string(),\n  previousBlockhash: superstruct.string(),\n  parentSlot: superstruct.number(),\n  signatures: superstruct.array(superstruct.string()),\n  blockTime: superstruct.nullable(superstruct.number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  slot: superstruct.number(),\n  meta: superstruct.nullable(ConfirmedTransactionMetaResult),\n  blockTime: superstruct.optional(superstruct.nullable(superstruct.number())),\n  transaction: ConfirmedTransactionResult,\n  version: superstruct.optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(superstruct.nullable(superstruct.type({\n  slot: superstruct.number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: superstruct.nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: superstruct.optional(superstruct.nullable(superstruct.number())),\n  version: superstruct.optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(superstruct.type({\n  blockhash: superstruct.string(),\n  feeCalculator: superstruct.type({\n    lamportsPerSignature: superstruct.number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(superstruct.type({\n  blockhash: superstruct.string(),\n  lastValidBlockHeight: superstruct.number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(superstruct.boolean());\nconst PerfSampleResult = superstruct.type({\n  slot: superstruct.number(),\n  numTransactions: superstruct.number(),\n  numSlots: superstruct.number(),\n  samplePeriodSecs: superstruct.number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(superstruct.array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(superstruct.nullable(superstruct.type({\n  feeCalculator: superstruct.type({\n    lamportsPerSignature: superstruct.number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(superstruct.string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(superstruct.string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = superstruct.type({\n  err: TransactionErrorResult,\n  logs: superstruct.array(superstruct.string()),\n  signature: superstruct.string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = superstruct.type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: superstruct.number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\" }`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.nullable(superstruct.number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = superstruct.create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = superstruct.create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = superstruct.create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = superstruct.create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = superstruct.create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = superstruct.create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.array(superstruct.nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.array(superstruct.nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = superstruct.array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? superstruct.create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : superstruct.create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58__default.default.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = superstruct.create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = superstruct.create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = superstruct.create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = superstruct.create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = superstruct.create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = superstruct.create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = superstruct.create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = superstruct.create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = superstruct.create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = superstruct.create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = superstruct.create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = superstruct.create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.nullable(superstruct.number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = superstruct.create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = superstruct.create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = superstruct.create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = superstruct.create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = superstruct.create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = superstruct.create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = superstruct.create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = superstruct.create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = superstruct.create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = superstruct.create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = superstruct.create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = superstruct.create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = superstruct.create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = superstruct.create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = superstruct.create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResult(superstruct.array(superstruct.number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = superstruct.create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = superstruct.create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = superstruct.create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = superstruct.create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = superstruct.create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = superstruct.create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = superstruct.create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = superstruct.create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = superstruct.create(unsafeRes, jsonRpcResultAndContext(superstruct.number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = buffer.Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = superstruct.create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = superstruct.create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = superstruct.create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true /* isArrayProp */);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = superstruct.create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), u64('recentSlot'), BufferLayout__namespace.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), u64(), BufferLayout__namespace.seq(publicKey(), BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout__namespace.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), bigintBuffer.toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout__namespace.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u8('instruction'), BufferLayout__namespace.u32('units'), BufferLayout__namespace.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u8('instruction'), BufferLayout__namespace.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u8('instruction'), BufferLayout__namespace.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout__namespace.struct([BufferLayout__namespace.u8('numSignatures'), BufferLayout__namespace.u8('padding'), BufferLayout__namespace.u16('signatureOffset'), BufferLayout__namespace.u16('signatureInstructionIndex'), BufferLayout__namespace.u16('publicKeyOffset'), BufferLayout__namespace.u16('publicKeyInstructionIndex'), BufferLayout__namespace.u16('messageDataOffset'), BufferLayout__namespace.u16('messageDataSize'), BufferLayout__namespace.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = buffer.Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.secp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout__namespace.struct([BufferLayout__namespace.u8('numSignatures'), BufferLayout__namespace.u16('signatureOffset'), BufferLayout__namespace.u8('signatureInstructionIndex'), BufferLayout__namespace.u16('ethAddressOffset'), BufferLayout__namespace.u8('ethAddressInstructionIndex'), BufferLayout__namespace.u16('messageDataOffset'), BufferLayout__namespace.u16('messageDataSize'), BufferLayout__namespace.u8('messageInstructionIndex'), BufferLayout__namespace.blob(20, 'ethAddress'), BufferLayout__namespace.blob(64, 'signature'), BufferLayout__namespace.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return buffer.Buffer.from(sha3.keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = buffer.Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = buffer.Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = buffer.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = buffer.Buffer.from(sha3.keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _class2;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_class2 = Lockup;\nLockup.default = new _class2(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout__namespace.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('newAuthorized'), BufferLayout__namespace.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('newAuthorized'), BufferLayout__namespace.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout__namespace.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), publicKey('newAuthorized'), BufferLayout__namespace.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), BufferLayout__namespace.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout__namespace.struct([BufferLayout__namespace.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = superstruct.type({\n  name: superstruct.string(),\n  website: superstruct.optional(superstruct.string()),\n  details: superstruct.optional(superstruct.string()),\n  keybaseUsername: superstruct.optional(superstruct.string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer$1) {\n    let byteArray = [...buffer$1];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(buffer.Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        superstruct.assert(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout__namespace.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout__namespace.u8('commission'), BufferLayout__namespace.nu64(),\n// votes.length\nBufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64('slot'), BufferLayout__namespace.u32('confirmationCount')]), BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'votes'), BufferLayout__namespace.u8('rootSlotValid'), BufferLayout__namespace.nu64('rootSlot'), BufferLayout__namespace.nu64(),\n// authorizedVoters.length\nBufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'authorizedVoters'), BufferLayout__namespace.struct([BufferLayout__namespace.seq(BufferLayout__namespace.struct([publicKey('authorizedPubkey'), BufferLayout__namespace.nu64('epochOfLastAuthorizedSwitch'), BufferLayout__namespace.nu64('targetEpoch')]), 32, 'buf'), BufferLayout__namespace.nu64('idx'), BufferLayout__namespace.u8('isEmpty')], 'priorVoters'), BufferLayout__namespace.nu64(),\n// epochCredits.length\nBufferLayout__namespace.seq(BufferLayout__namespace.struct([BufferLayout__namespace.nu64('epoch'), BufferLayout__namespace.nu64('credits'), BufferLayout__namespace.nu64('prevCredits')]), BufferLayout__namespace.offset(BufferLayout__namespace.u32(), -8), 'epochCredits'), BufferLayout__namespace.struct([BufferLayout__namespace.nu64('slot'), BufferLayout__namespace.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexports.Account = Account;\nexports.AddressLookupTableAccount = AddressLookupTableAccount;\nexports.AddressLookupTableInstruction = AddressLookupTableInstruction;\nexports.AddressLookupTableProgram = AddressLookupTableProgram;\nexports.Authorized = Authorized;\nexports.BLOCKHASH_CACHE_TIMEOUT_MS = BLOCKHASH_CACHE_TIMEOUT_MS;\nexports.BPF_LOADER_DEPRECATED_PROGRAM_ID = BPF_LOADER_DEPRECATED_PROGRAM_ID;\nexports.BPF_LOADER_PROGRAM_ID = BPF_LOADER_PROGRAM_ID;\nexports.BpfLoader = BpfLoader;\nexports.COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS;\nexports.ComputeBudgetInstruction = ComputeBudgetInstruction;\nexports.ComputeBudgetProgram = ComputeBudgetProgram;\nexports.Connection = Connection;\nexports.Ed25519Program = Ed25519Program;\nexports.Enum = Enum;\nexports.EpochSchedule = EpochSchedule;\nexports.FeeCalculatorLayout = FeeCalculatorLayout;\nexports.Keypair = Keypair;\nexports.LAMPORTS_PER_SOL = LAMPORTS_PER_SOL;\nexports.LOOKUP_TABLE_INSTRUCTION_LAYOUTS = LOOKUP_TABLE_INSTRUCTION_LAYOUTS;\nexports.Loader = Loader;\nexports.Lockup = Lockup;\nexports.MAX_SEED_LENGTH = MAX_SEED_LENGTH;\nexports.Message = Message;\nexports.MessageAccountKeys = MessageAccountKeys;\nexports.MessageV0 = MessageV0;\nexports.NONCE_ACCOUNT_LENGTH = NONCE_ACCOUNT_LENGTH;\nexports.NonceAccount = NonceAccount;\nexports.PACKET_DATA_SIZE = PACKET_DATA_SIZE;\nexports.PUBLIC_KEY_LENGTH = PUBLIC_KEY_LENGTH;\nexports.PublicKey = PublicKey;\nexports.SIGNATURE_LENGTH_IN_BYTES = SIGNATURE_LENGTH_IN_BYTES;\nexports.SOLANA_SCHEMA = SOLANA_SCHEMA;\nexports.STAKE_CONFIG_ID = STAKE_CONFIG_ID;\nexports.STAKE_INSTRUCTION_LAYOUTS = STAKE_INSTRUCTION_LAYOUTS;\nexports.SYSTEM_INSTRUCTION_LAYOUTS = SYSTEM_INSTRUCTION_LAYOUTS;\nexports.SYSVAR_CLOCK_PUBKEY = SYSVAR_CLOCK_PUBKEY;\nexports.SYSVAR_EPOCH_SCHEDULE_PUBKEY = SYSVAR_EPOCH_SCHEDULE_PUBKEY;\nexports.SYSVAR_INSTRUCTIONS_PUBKEY = SYSVAR_INSTRUCTIONS_PUBKEY;\nexports.SYSVAR_RECENT_BLOCKHASHES_PUBKEY = SYSVAR_RECENT_BLOCKHASHES_PUBKEY;\nexports.SYSVAR_RENT_PUBKEY = SYSVAR_RENT_PUBKEY;\nexports.SYSVAR_REWARDS_PUBKEY = SYSVAR_REWARDS_PUBKEY;\nexports.SYSVAR_SLOT_HASHES_PUBKEY = SYSVAR_SLOT_HASHES_PUBKEY;\nexports.SYSVAR_SLOT_HISTORY_PUBKEY = SYSVAR_SLOT_HISTORY_PUBKEY;\nexports.SYSVAR_STAKE_HISTORY_PUBKEY = SYSVAR_STAKE_HISTORY_PUBKEY;\nexports.Secp256k1Program = Secp256k1Program;\nexports.SendTransactionError = SendTransactionError;\nexports.SolanaJSONRPCError = SolanaJSONRPCError;\nexports.SolanaJSONRPCErrorCode = SolanaJSONRPCErrorCode;\nexports.StakeAuthorizationLayout = StakeAuthorizationLayout;\nexports.StakeInstruction = StakeInstruction;\nexports.StakeProgram = StakeProgram;\nexports.Struct = Struct;\nexports.SystemInstruction = SystemInstruction;\nexports.SystemProgram = SystemProgram;\nexports.Transaction = Transaction;\nexports.TransactionExpiredBlockheightExceededError = TransactionExpiredBlockheightExceededError;\nexports.TransactionExpiredNonceInvalidError = TransactionExpiredNonceInvalidError;\nexports.TransactionExpiredTimeoutError = TransactionExpiredTimeoutError;\nexports.TransactionInstruction = TransactionInstruction;\nexports.TransactionMessage = TransactionMessage;\nexports.TransactionStatus = TransactionStatus;\nexports.VALIDATOR_INFO_KEY = VALIDATOR_INFO_KEY;\nexports.VERSION_PREFIX_MASK = VERSION_PREFIX_MASK;\nexports.VOTE_PROGRAM_ID = VOTE_PROGRAM_ID;\nexports.ValidatorInfo = ValidatorInfo;\nexports.VersionedMessage = VersionedMessage;\nexports.VersionedTransaction = VersionedTransaction;\nexports.VoteAccount = VoteAccount;\nexports.VoteAuthorizationLayout = VoteAuthorizationLayout;\nexports.VoteInit = VoteInit;\nexports.VoteInstruction = VoteInstruction;\nexports.VoteProgram = VoteProgram;\nexports.clusterApiUrl = clusterApiUrl;\nexports.sendAndConfirmRawTransaction = sendAndConfirmRawTransaction;\nexports.sendAndConfirmTransaction = sendAndConfirmTransaction;\n//# sourceMappingURL=index.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/client/browser/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/jayson/lib/client/browser/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst uuid = (__webpack_require__(/*! uuid */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/index.js\").v4);\nconst generateRequest = __webpack_require__(/*! ../../generateRequest */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/generateRequest.js\");\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/client/browser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/generateRequest.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/jayson/lib/generateRequest.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst uuid = (__webpack_require__(/*! uuid */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/index.js\").v4);\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9qYXlzb24vbGliL2dlbmVyYXRlUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLHFIQUFrQjs7QUFFL0I7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLGNBQWM7QUFDMUIsWUFBWSxvQkFBb0I7QUFDaEMsWUFBWSxRQUFRO0FBQ3BCLFlBQVksUUFBUTtBQUNwQixZQUFZLFNBQVM7QUFDckIsWUFBWSxVQUFVO0FBQ3RCLGFBQWEsV0FBVztBQUN4QixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHO0FBQ2pHO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9ub2RlX21vZHVsZXMvamF5c29uL2xpYi9nZW5lcmF0ZVJlcXVlc3QuanM/Y2NmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJykudjQ7XG5cbi8qKlxuICogIEdlbmVyYXRlcyBhIEpTT04tUlBDIDEuMCBvciAyLjAgcmVxdWVzdFxuICogIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTmFtZSBvZiBtZXRob2QgdG8gY2FsbFxuICogIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBwYXJhbXMgQXJyYXkgb2YgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIG1ldGhvZCBhcyBzcGVjaWZpZWQsIG9yIGFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgbmFtZXMgYW5kIGNvcnJlc3BvbmRpbmcgdmFsdWVcbiAqICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8bnVsbH0gW2lkXSBSZXF1ZXN0IElEIGNhbiBiZSBhIHN0cmluZywgbnVtYmVyLCBudWxsIGZvciBleHBsaWNpdCBub3RpZmljYXRpb24gb3IgbGVmdCBvdXQgZm9yIGF1dG9tYXRpYyBnZW5lcmF0aW9uXG4gKiAgQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52ZXJzaW9uPTJdIEpTT04tUlBDIHZlcnNpb24gdG8gdXNlICgxIG9yIDIpXG4gKiAgQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5ub3RpZmljYXRpb25JZE51bGw9ZmFsc2VdIFdoZW4gdHJ1ZSwgdmVyc2lvbiAyIHJlcXVlc3RzIHdpbGwgc2V0IGlkIHRvIG51bGwgaW5zdGVhZCBvZiBvbWl0dGluZyBpdFxuICogIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmdlbmVyYXRvcl0gUGFzc2VkIHRoZSByZXF1ZXN0LCBhbmQgdGhlIG9wdGlvbnMgb2JqZWN0IGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm4gYSByZXF1ZXN0IElEXG4gKiAgQHRocm93cyB7VHlwZUVycm9yfSBJZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgYXJlIGludmFsaWRcbiAqICBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTi1SUEMgMS4wIG9yIDIuMCByZXF1ZXN0XG4gKiAgQG1lbWJlck9mIFV0aWxzXG4gKi9cbmNvbnN0IGdlbmVyYXRlUmVxdWVzdCA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBpZCwgb3B0aW9ucykge1xuICBpZih0eXBlb2YgbWV0aG9kICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IobWV0aG9kICsgJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBjaGVjayB2YWxpZCB2ZXJzaW9uIHByb3ZpZGVkXG4gIGNvbnN0IHZlcnNpb24gPSB0eXBlb2Ygb3B0aW9ucy52ZXJzaW9uID09PSAnbnVtYmVyJyA/IG9wdGlvbnMudmVyc2lvbiA6IDI7XG4gIGlmICh2ZXJzaW9uICE9PSAxICYmIHZlcnNpb24gIT09IDIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHZlcnNpb24gKyAnIG11c3QgYmUgMSBvciAyJyk7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogbWV0aG9kXG4gIH07XG5cbiAgaWYodmVyc2lvbiA9PT0gMikge1xuICAgIHJlcXVlc3QuanNvbnJwYyA9ICcyLjAnO1xuICB9XG5cbiAgaWYocGFyYW1zKSB7XG4gICAgLy8gcGFyYW1zIGdpdmVuLCBidXQgaW52YWxpZD9cbiAgICBpZih0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHBhcmFtcyArICcgbXVzdCBiZSBhbiBvYmplY3QsIGFycmF5IG9yIG9taXR0ZWQnKTtcbiAgICB9XG4gICAgcmVxdWVzdC5wYXJhbXMgPSBwYXJhbXM7XG4gIH1cblxuICAvLyBpZiBpZCB3YXMgbGVmdCBvdXQsIGdlbmVyYXRlIG9uZSAobnVsbCBtZWFucyBleHBsaWNpdCBub3RpZmljYXRpb24pXG4gIGlmKHR5cGVvZihpZCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgZ2VuZXJhdG9yID0gdHlwZW9mIG9wdGlvbnMuZ2VuZXJhdG9yID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5nZW5lcmF0b3IgOiBmdW5jdGlvbigpIHsgcmV0dXJuIHV1aWQoKTsgfTtcbiAgICByZXF1ZXN0LmlkID0gZ2VuZXJhdG9yKHJlcXVlc3QsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDIgJiYgaWQgPT09IG51bGwpIHtcbiAgICAvLyB3ZSBoYXZlIGEgdmVyc2lvbiAyIG5vdGlmaWNhdGlvblxuICAgIGlmIChvcHRpb25zLm5vdGlmaWNhdGlvbklkTnVsbCkge1xuICAgICAgcmVxdWVzdC5pZCA9IG51bGw7IC8vIGlkIHdpbGwgbm90IGJlIHNldCBhdCBhbGwgdW5sZXNzIG9wdGlvbiBwcm92aWRlZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXF1ZXN0LmlkID0gaWQ7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVSZXF1ZXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/jayson/lib/generateRequest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDUTtBQUNFO0FBQ0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanM/Y2FhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIHYxIH0gZnJvbSAnLi92MS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYzIH0gZnJvbSAnLi92My5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY0IH0gZnJvbSAnLi92NC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY1IH0gZnJvbSAnLi92NS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5JTCB9IGZyb20gJy4vbmlsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZhbGlkYXRlIH0gZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlLmpzJzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/md5.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/md5.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsU0FBUyx3REFBaUI7QUFDMUI7O0FBRUEsaUVBQWUsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9tZDUuanM/ZDE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmZ1bmN0aW9uIG1kNShieXRlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcywgJ3V0ZjgnKTtcbiAgfVxuXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWQ1OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/nil.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/nil.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzPzU4OTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/parse.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/parse.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7O0FBRXJDO0FBQ0EsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanM/Mjg2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICBsZXQgdjtcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/regex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/regex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanM/ZDE5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/rng.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/rng.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1Qix1Q0FBdUM7O0FBRXZDO0FBQ2U7QUFDZjtBQUNBLElBQUksNERBQXFCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9ybmcuanM/ZWFhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5jb25zdCBybmRzOFBvb2wgPSBuZXcgVWludDhBcnJheSgyNTYpOyAvLyAjIG9mIHJhbmRvbSB2YWx1ZXMgdG8gcHJlLWFsbG9jYXRlXG5cbmxldCBwb29sUHRyID0gcm5kczhQb29sLmxlbmd0aDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgaWYgKHBvb2xQdHIgPiBybmRzOFBvb2wubGVuZ3RoIC0gMTYpIHtcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMocm5kczhQb29sKTtcbiAgICBwb29sUHRyID0gMDtcbiAgfVxuXG4gIHJldHVybiBybmRzOFBvb2wuc2xpY2UocG9vbFB0ciwgcG9vbFB0ciArPSAxNik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/sha1.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/sha1.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLFNBQVMsd0RBQWlCO0FBQzFCOztBQUVBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcz83YzQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcywgJ3V0ZjgnKTtcbiAgfVxuXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNGdCQUE0Z0I7QUFDNWdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sd0RBQVE7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanM/MDA3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIGNvbnN0IHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v1.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v1.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(b);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ1ksQ0FBQztBQUN4QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZUFBZTs7O0FBR2Y7QUFDQSxvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTs7QUFFQTtBQUNBLHdEQUF3RCwrQ0FBRzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOzs7QUFHQSx3RUFBd0U7QUFDeEU7O0FBRUEsNEVBQTRFOztBQUU1RSxnRUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7OztBQUdBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEIsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkIsb0NBQW9DOztBQUVwQyw4QkFBOEI7O0FBRTlCLGtDQUFrQzs7QUFFbEMsNEJBQTRCOztBQUU1QixrQkFBa0IsT0FBTztBQUN6QjtBQUNBOztBQUVBLGdCQUFnQix5REFBUztBQUN6Qjs7QUFFQSxpRUFBZSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YxLmpzPzRkY2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJzsgLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG5sZXQgX25vZGVJZDtcblxubGV0IF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG5cblxubGV0IF9sYXN0TVNlY3MgPSAwO1xubGV0IF9sYXN0TlNlY3MgPSAwOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IHN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v3.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v3.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsV0FBVyxtREFBRyxhQUFhLCtDQUFHO0FBQzlCLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanM/NjI2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBtZDUgZnJvbSAnLi9tZDUuanMnO1xuY29uc3QgdjMgPSB2MzUoJ3YzJywgMHgzMCwgbWQ1KTtcbmV4cG9ydCBkZWZhdWx0IHYzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v35.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v35.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ1I7O0FBRS9CO0FBQ0EsMkNBQTJDOztBQUUzQzs7QUFFQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNBO0FBQ1AsNkJBQWUsb0NBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IscURBQUs7QUFDdkI7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVyx5REFBUztBQUNwQixJQUFJOzs7QUFHSjtBQUNBLDhCQUE4QjtBQUM5QixJQUFJLGVBQWU7OztBQUduQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MzUuanM/OTBjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIGNvbnN0IGJ5dGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IGNvbnN0IEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGNvbnN0IFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZXNwYWNlLmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ2lmeShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v4.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v4.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ1k7O0FBRXZDO0FBQ0E7QUFDQSxpREFBaUQsK0NBQUcsS0FBSzs7QUFFekQ7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVMseURBQVM7QUFDbEI7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NC5qcz8zOWE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v5.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v5.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsV0FBVyxtREFBRyxhQUFhLGdEQUFJO0FBQy9CLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanM/NDU5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBzaGExIGZyb20gJy4vc2hhMS5qcyc7XG5jb25zdCB2NSA9IHYzNSgndjUnLCAweDUwLCBzaGExKTtcbmV4cG9ydCBkZWZhdWx0IHY1OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7O0FBRS9CO0FBQ0EscUNBQXFDLGlEQUFLO0FBQzFDOztBQUVBLGlFQUFlLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanM/YjEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQzs7QUFFckM7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlFQUFlLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcz82NGJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc3Vic3RyKDE0LCAxKSwgMTYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2ZXJzaW9uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey\"), __webpack_require__.e(\"vendor-chunks/sha256-uint8array\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4TUFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdOQUEwQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdSQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwRUFBdUI7QUFDckQ7QUFDQTtBQUNBOztBQUV5QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9pbmRleC5tanM/NThkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIEhlYWRlciBuYW1lIGZvciBhbiBBUEkga2V5IHN0YW1wXG5jb25zdCBzdGFtcEhlYWRlck5hbWUgPSBcIlgtU3RhbXBcIjtcbi8vIGB3aW5kb3cuZG9jdW1lbnRgIGVuc3VyZXMgdGhhdCB3ZSdyZSBpbiBhIGJyb3dzZXIgY29udGV4dFxuLy8gYW5kIGBjcnlwdG8uc3VidGxlYCBlbnN1cmVzIHRoYXQgaXQgc3VwcG9ydHMgdGhlIHdlYiBjcnlwdG8gQVBJc1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNDcnlwdG9FbmFibGVkQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8uc3VidGxlICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gV2UgY2hlY2sgYHByb2Nlc3MudmVyc2lvbnMubm9kZWBcbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICE9IG51bGwgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbDtcbi8qKlxuICogU2lnbmF0dXJlIGZ1bmN0aW9uIGFic3RyYWN0aW5nIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIE5vZGVKUyBhbmQgd2ViIGVudmlyb25tZW50cyBmb3Igc2lnbmluZyB3aXRoIEFQSSBrZXlzLlxuICovXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGlmIChpc0NyeXB0b0VuYWJsZWRCcm93c2VyKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL3dlYmNyeXB0by5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL25vZGVjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIE5vZGVKUyBvciB3ZWIgY3J5cHRvIGF0IG91ciBkaXNwb3NhbCwgZGVmYXVsdCB0byBwdXJlIEpTIGltcGxlbWVudGF0aW9uXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2UgZm9yIG9sZCBicm93c2VycyBhbmQgcmVhY3QgbmF0aXZlIGVudmlyb25tZW50c1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9wdXJlanMubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxufTtcbi8qKlxuICogU3RhbXBlciB0byB1c2Ugd2l0aCBgQHR1cm5rZXkvaHR0cGAncyBgVHVybmtleUNsaWVudGBcbiAqL1xuY2xhc3MgQXBpS2V5U3RhbXBlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXBpUHVibGljS2V5ID0gY29uZmlnLmFwaVB1YmxpY0tleTtcbiAgICAgICAgdGhpcy5hcGlQcml2YXRlS2V5ID0gY29uZmlnLmFwaVByaXZhdGVLZXk7XG4gICAgfVxuICAgIGFzeW5jIHN0YW1wKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc2lnbldpdGhBcGlLZXkoe1xuICAgICAgICAgICAgcHVibGljS2V5OiB0aGlzLmFwaVB1YmxpY0tleSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHRoaXMuYXBpUHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBheWxvYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBzY2hlbWU6IFwiU0lHTkFUVVJFX1NDSEVNRV9US19BUElfUDI1NlwiLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFtcEhlYWRlck5hbWU6IHN0YW1wSGVhZGVyTmFtZSxcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyVmFsdWU6IHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKEpTT04uc3RyaW5naWZ5KHN0YW1wKSksXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBBcGlLZXlTdGFtcGVyLCBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanM/ZDAxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IHByaXZhdGVLZXlPYmplY3QgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gdGhlIGtleSBjYW4gYmUgYSBKV0sgb2JqZWN0IHNpbmNlIE5vZGUgdjE1LjEyLjBcbiAgICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbCNjcnlwdG9jcmVhdGVwcml2YXRla2V5a2V5XG4gICAgICAgIGtleTogY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleDogcHVibGljS2V5LFxuICAgICAgICB9KSxcbiAgICAgICAgZm9ybWF0OiBcImp3a1wiLFxuICAgIH0pO1xuICAgIGNvbnN0IHNpZ24gPSBjcnlwdG8uY3JlYXRlU2lnbihcIlNIQTI1NlwiKTtcbiAgICBzaWduLndyaXRlKEJ1ZmZlci5mcm9tKGNvbnRlbnQpKTtcbiAgICBzaWduLmVuZCgpO1xuICAgIHJldHVybiBzaWduLnNpZ24ocHJpdmF0ZUtleU9iamVjdCwgXCJoZXhcIik7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZWNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcz9kODAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHAyNTYgfSBmcm9tICdAbm9ibGUvY3VydmVzL3AyNTYnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ3NoYTI1Ni11aW50OGFycmF5JztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBwMjU2LmdldFB1YmxpY0tleShpbnB1dC5wcml2YXRlS2V5LCB0cnVlKTtcbiAgICAvLyBQdWJsaWMga2V5IGluIHRoZSB1c3VhbCAwMiBvciAwMyArIDY0IGhleCBkaWdpdHNcbiAgICBjb25zdCBwdWJsaWNLZXlTdHJpbmcgPSB1aW50OEFycmF5VG9IZXhTdHJpbmcocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5U3RyaW5nICE9IGlucHV0LnB1YmxpY0tleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBBUEkga2V5LiBFeHBlY3RlZCB0byBnZXQgcHVibGljIGtleSAke2lucHV0LnB1YmxpY0tleX0sIGdvdCAke3B1YmxpY0tleVN0cmluZ31gKTtcbiAgICB9XG4gICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goKS51cGRhdGUoaW5wdXQuY29udGVudCkuZGlnZXN0KCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gcDI1Ni5zaWduKGhhc2gsIGlucHV0LnByaXZhdGVLZXkpO1xuICAgIHJldHVybiBzaWduYXR1cmUudG9ERVJIZXgoKTtcbn07XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXJlanMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanM/N2QwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2J5dGVzLnRzXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQ29udmVydHMgdGhlIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBoZXggdGhlIGlucHV0XG4gKiBAcmV0dXJuIHRoZSBieXRlIGFycmF5IG91dHB1dFxuICogQHRocm93cyB7IUVycm9yfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGFycltpIC8gMl0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgYXJyYXkgdG8gaGV4LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHJldHVybiBoZXggdGhlIG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0hleChieXRlcykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmVzdWx0ICs9IGhleEJ5dGUubGVuZ3RoID4gMSA/IGhleEJ5dGUgOiBcIjBcIiArIGhleEJ5dGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEJhc2U2NCBlbmNvZGUgYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHBhcmFtIG9wdF93ZWJTYWZlIFRydWUgaW5kaWNhdGVzIHdlIHNob3VsZCB1c2UgdGhlIGFsdGVybmF0aXZlXG4gKiAgICAgYWxwaGFiZXQsIHdoaWNoIGRvZXMgbm90IHJlcXVpcmUgZXNjYXBpbmcgZm9yIHVzZSBpbiBVUkxzLlxuICogQHJldHVybiBiYXNlNjQgb3V0cHV0XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0KGJ5dGVzLCBvcHRfd2ViU2FmZSkge1xuICAgIGNvbnN0IGVuY29kZWQgPSBidG9hKFxuICAgIC8qIHBhZGRpbmcgKi9cbiAgICB0b0J5dGVTdHJpbmcoYnl0ZXMpKS5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIGlmIChvcHRfd2ViU2FmZSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLiBFYWNoIGJ5dGUgaXMgY29ycmVzcG9uZGluZyB0byBhXG4gKiBjaGFyYWN0ZXIuIERvZXMgbm90IHN1cHBvcnQgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZVN0cmluZyhieXRlcykge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBmcm9tSGV4LCB0b0Jhc2U2NCwgdG9CeXRlU3RyaW5nLCB0b0hleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i) {\n    let input = i.toString(16);\n    // If necessary, prepend leading zero to ensure that input length is even.\n    input = input.length % 2 === 0 ? input : \"0\" + input;\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n * Decodes a public key in _compressed_ format.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    if (point.length !== 1 + fieldSize) {\n        throw new Error(\"compressed point has wrong length\");\n    }\n    if (point[0] !== 2 && point[0] !== 3) {\n        throw new Error(\"invalid format\");\n    }\n    const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n    const x = byteArrayToInteger(point.subarray(1, point.length));\n    const p = getModulus();\n    if (x < BigInt(0) || x >= p) {\n        throw new Error(\"x is out of range\");\n    }\n    const y = getY(x, lsb);\n    const result = {\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x), /* websafe */ true),\n        y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y), /* websafe */ true),\n        ext: true,\n    };\n    return result;\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)(hexStringToUint8Array(compressedPublicKeyHex));\n    jwk.d = hexStringToBase64urlString(uncompressedPrivateKeyHex);\n    return jwk;\n}\nfunction hexStringToUint8Array(input) {\n    if (input.length === 0 ||\n        input.length % 2 !== 0 ||\n        /[^a-fA-F0-9]/u.test(input)) {\n        throw new Error(`Invalid hex string: ${JSON.stringify(input)}`);\n    }\n    return Uint8Array.from(input\n        .match(/.{2}/g // Split string by every two characters\n    )\n        .map((byte) => parseInt(byte, 16)));\n}\nfunction hexStringToBase64urlString(input) {\n    const buffer = hexStringToUint8Array(input);\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.stringToBase64urlString)(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUNHOztBQUU1RDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLGdCQUFnQixzRUFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxzQkFBc0I7QUFDckU7QUFDQTtBQUNBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDBFQUF1QjtBQUNsQzs7QUFFcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzPzgyNDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcG9pbnREZWNvZGUgfSBmcm9tICcuL3RpbmsvZWxsaXB0aWNfY3VydmVzLm1qcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuZnVuY3Rpb24gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayhpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gcG9pbnREZWNvZGUoaGV4U3RyaW5nVG9VaW50OEFycmF5KGNvbXByZXNzZWRQdWJsaWNLZXlIZXgpKTtcbiAgICBqd2suZCA9IGhleFN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgpO1xuICAgIHJldHVybiBqd2s7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmdUb1VpbnQ4QXJyYXkoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIGlucHV0Lmxlbmd0aCAlIDIgIT09IDAgfHxcbiAgICAgICAgL1teYS1mQS1GMC05XS91LnRlc3QoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXggc3RyaW5nOiAke0pTT04uc3RyaW5naWZ5KGlucHV0KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShpbnB1dFxuICAgICAgICAubWF0Y2goLy57Mn0vZyAvLyBTcGxpdCBzdHJpbmcgYnkgZXZlcnkgdHdvIGNoYXJhY3RlcnNcbiAgICApXG4gICAgICAgIC5tYXAoKGJ5dGUpID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpO1xufVxuZnVuY3Rpb24gaGV4U3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoaW5wdXQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBoZXhTdHJpbmdUb1VpbnQ4QXJyYXkoaW5wdXQpO1xuICAgIHJldHVybiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhidWZmZXIucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoeCksIFwiXCIpKTtcbn1cblxuZXhwb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3dlYmNyeXB0by5tanM/YzFhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgaW1wb3J0VHVybmtleUFwaUtleSh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgc2lnbk1lc3NhZ2UoeyBrZXksIGNvbnRlbnQgfSk7XG59O1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0VHVybmtleUFwaUtleShpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXgsXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwiandrXCIsIGp3aywge1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIG5hbWVkQ3VydmU6IFwiUC0yNTZcIixcbiAgICB9LCBmYWxzZSwgLy8gbm90IGV4dHJhY3RhYmxlXG4gICAgW1wic2lnblwiXSAvLyBhbGxvdyBzaWduaW5nXG4gICAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlKGlucHV0KSB7XG4gICAgY29uc3QgeyBrZXksIGNvbnRlbnQgfSA9IGlucHV0O1xuICAgIGNvbnN0IHNpZ25hdHVyZUllZWUxMzYzID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBoYXNoOiBcIlNIQS0yNTZcIixcbiAgICB9LCBrZXksIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlRGVyID0gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihuZXcgVWludDhBcnJheShzaWduYXR1cmVJZWVlMTM2MykpO1xuICAgIHJldHVybiB1aW50OEFycmF5VG9IZXhTdHJpbmcoc2lnbmF0dXJlRGVyKTtcbn1cbi8qKlxuICogYFN1YnRsZUNyeXB0by5zaWduKC4uLilgIG91dHB1dHMgc2lnbmF0dXJlIGluIElFRUUgUDEzNjMgZm9ybWF0OlxuICogLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3VidGxlQ3J5cHRvL3NpZ24jZWNkc2FcbiAqXG4gKiBUdXJua2V5IGV4cGVjdHMgdGhlIHNpZ25hdHVyZSBlbmNvZGluZyB0byBiZSBERVItZW5jb2RlZCBBU04uMTpcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL3RraHEvdGtjbGkvYmxvYi83ZjAxNTlhZjVhNzMzODdmZjA1MDY0NzE4MGQxZGI0ZDNhM2FhMDMzL3NyYy9pbnRlcm5hbC9hcGlrZXkvYXBpa2V5LmdvI0wxNDlcbiAqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDExNFxuICpcbiAqIFRyYW5zZm9ybSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSAxMzYzIGVuY29kaW5nIHRvIERFUiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gaWVlZSB0aGUgRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgZW5jb2RpbmdcbiAqIEByZXR1cm4gRUNEU0Egc2lnbmF0dXJlIGluIERFUiBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKGllZWUpIHtcbiAgICBpZiAoaWVlZS5sZW5ndGggJSAyICE9IDAgfHwgaWVlZS5sZW5ndGggPT0gMCB8fCBpZWVlLmxlbmd0aCA+IDEzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElFRUUgUDEzNjMgc2lnbmF0dXJlIGVuY29kaW5nLiBMZW5ndGg6IFwiICsgaWVlZS5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCByID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KDAsIGllZWUubGVuZ3RoIC8gMikpO1xuICAgIGNvbnN0IHMgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoaWVlZS5sZW5ndGggLyAyLCBpZWVlLmxlbmd0aCkpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgci5sZW5ndGggKyAxICsgMSArIHMubGVuZ3RoO1xuICAgIGxldCBkZXI7XG4gICAgaWYgKGxlbmd0aCA+PSAxMjgpIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMyk7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDEyOCArIDE7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAyKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gci5sZW5ndGg7XG4gICAgZGVyLnNldChyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSByLmxlbmd0aDtcbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gcy5sZW5ndGg7XG4gICAgZGVyLnNldChzLCBvZmZzZXQpO1xuICAgIHJldHVybiBkZXI7XG59XG4vKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMzExXG4gKlxuICogVHJhbnNmb3JtIGEgYmlnIGludGVnZXIgaW4gYmlnIGVuZGlhbiB0byBtaW5pbWFsIHVuc2lnbmVkIGZvcm0gd2hpY2ggaGFzXG4gKiBubyBleHRyYSB6ZXJvIGF0IHRoZSBiZWdpbm5pbmcgZXhjZXB0IHdoZW4gdGhlIGhpZ2hlc3QgYml0IGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gdG9VbnNpZ25lZEJpZ051bShieXRlcykge1xuICAgIC8vIFJlbW92ZSB6ZXJvIHByZWZpeGVzLlxuICAgIGxldCBzdGFydCA9IDA7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnl0ZXMubGVuZ3RoICYmIGJ5dGVzW3N0YXJ0XSA9PSAwKSB7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3RhcnQgPSBieXRlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBsZXQgZXh0cmFaZXJvID0gMDtcbiAgICAvLyBJZiB0aGUgMXN0IGJpdCBpcyBub3QgemVybywgYWRkIDEgemVybyBieXRlLlxuICAgIGlmICgoYnl0ZXNbc3RhcnRdICYgMTI4KSA9PSAxMjgpIHtcbiAgICAgICAgLy8gQWRkIGV4dHJhIHplcm8uXG4gICAgICAgIGV4dHJhWmVybyA9IDE7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCAtIHN0YXJ0ICsgZXh0cmFaZXJvKTtcbiAgICByZXMuc2V0KGJ5dGVzLnN1YmFycmF5KHN0YXJ0KSwgZXh0cmFaZXJvKTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9fc2hvcnR3X3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDcUI7QUFDUDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyx3REFBSSxZQUFZLGdFQUFXO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ087QUFDUCw2QkFBNkIscUVBQVcsR0FBRywrQkFBK0I7QUFDMUUsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcz8zMDFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCB7IGhtYWMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL2htYWMnO1xuaW1wb3J0IHsgY29uY2F0Qnl0ZXMsIHJhbmRvbUJ5dGVzIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgeyB3ZWllcnN0cmFzcyB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuLy8gY29ubmVjdHMgbm9ibGUtY3VydmVzIHRvIG5vYmxlLWhhc2hlc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhhc2goaGFzaCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc2gsXG4gICAgICAgIGhtYWM6IChrZXksIC4uLm1zZ3MpID0+IGhtYWMoaGFzaCwga2V5LCBjb25jYXRCeXRlcyguLi5tc2dzKSksXG4gICAgICAgIHJhbmRvbUJ5dGVzLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VydmUoY3VydmVEZWYsIGRlZkhhc2gpIHtcbiAgICBjb25zdCBjcmVhdGUgPSAoaGFzaCkgPT4gd2VpZXJzdHJhc3MoeyAuLi5jdXJ2ZURlZiwgLi4uZ2V0SGFzaChoYXNoKSB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3Nob3J0d191dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        _utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(key))\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   p256: () => (/* binding */ p256),\n/* harmony export */   secp256r1: () => (/* binding */ secp256r1)\n/* harmony export */ });\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n// prettier-ignore\nconst p256 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: CURVE_A, // Equation params: a, b\n    b: CURVE_B,\n    Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n    // Curve order, total count of valid points in the field\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    // Base (generator) point (x, y)\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n    h: BigInt(1),\n    lowS: false,\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\nconst secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_3__.mapToCurveSimpleSWU)(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(secp256r1.ProjectivePoint, (scalars) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=p256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9wMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0g7QUFDQTtBQUNrQjtBQUNMO0FBQzNEO0FBQ0E7QUFDQSxXQUFXLDJEQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNPLGFBQWEsNkRBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUUsd0RBQU07QUFDRjtBQUNQLHNDQUFzQyw2RUFBbUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQyx3RUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdEQUFNO0FBQ2hCLENBQUM7QUFDTTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9wMjU2LmpzP2M4ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgY3JlYXRlQ3VydmUgfSBmcm9tICcuL19zaG9ydHdfdXRpbHMuanMnO1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL2Fic3RyYWN0L21vZHVsYXIuanMnO1xuaW1wb3J0IHsgbWFwVG9DdXJ2ZVNpbXBsZVNXVSB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaGVyIH0gZnJvbSAnLi9hYnN0cmFjdC9oYXNoLXRvLWN1cnZlLmpzJztcbi8vIE5JU1Qgc2VjcDI1NnIxIGFrYSBwMjU2XG4vLyBodHRwczovL3d3dy5zZWNnLm9yZy9zZWMyLXYyLnBkZiwgaHR0cHM6Ly9uZXVyb21hbmNlci5zay9zdGQvbmlzdC9QLTI1NlxuY29uc3QgRnAgPSBGaWVsZChCaWdJbnQoJzB4ZmZmZmZmZmYwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicpKTtcbmNvbnN0IENVUlZFX0EgPSBGcC5jcmVhdGUoQmlnSW50KCctMycpKTtcbmNvbnN0IENVUlZFX0IgPSBCaWdJbnQoJzB4NWFjNjM1ZDhhYTNhOTNlN2IzZWJiZDU1NzY5ODg2YmM2NTFkMDZiMGNjNTNiMGY2M2JjZTNjM2UyN2QyNjA0YicpO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgcDI1NiA9IGNyZWF0ZUN1cnZlKHtcbiAgICBhOiBDVVJWRV9BLCAvLyBFcXVhdGlvbiBwYXJhbXM6IGEsIGJcbiAgICBiOiBDVVJWRV9CLFxuICAgIEZwLCAvLyBGaWVsZDogMm4qKjIyNG4gKiAoMm4qKjMybi0xbikgKyAybioqMTkybiArIDJuKio5Nm4tMW5cbiAgICAvLyBDdXJ2ZSBvcmRlciwgdG90YWwgY291bnQgb2YgdmFsaWQgcG9pbnRzIGluIHRoZSBmaWVsZFxuICAgIG46IEJpZ0ludCgnMHhmZmZmZmZmZjAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmJjZTZmYWFkYTcxNzllODRmM2I5Y2FjMmZjNjMyNTUxJyksXG4gICAgLy8gQmFzZSAoZ2VuZXJhdG9yKSBwb2ludCAoeCwgeSlcbiAgICBHeDogQmlnSW50KCcweDZiMTdkMWYyZTEyYzQyNDdmOGJjZTZlNTYzYTQ0MGYyNzcwMzdkODEyZGViMzNhMGY0YTEzOTQ1ZDg5OGMyOTYnKSxcbiAgICBHeTogQmlnSW50KCcweDRmZTM0MmUyZmUxYTdmOWI4ZWU3ZWI0YTdjMGY5ZTE2MmJjZTMzNTc2YjMxNWVjZWNiYjY0MDY4MzdiZjUxZjUnKSxcbiAgICBoOiBCaWdJbnQoMSksXG4gICAgbG93UzogZmFsc2UsXG59LCBzaGEyNTYpO1xuZXhwb3J0IGNvbnN0IHNlY3AyNTZyMSA9IHAyNTY7XG5jb25zdCBtYXBTV1UgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IG1hcFRvQ3VydmVTaW1wbGVTV1UoRnAsIHtcbiAgICBBOiBDVVJWRV9BLFxuICAgIEI6IENVUlZFX0IsXG4gICAgWjogRnAuY3JlYXRlKEJpZ0ludCgnLTEwJykpLFxufSkpKCk7XG5jb25zdCBodGYgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGNyZWF0ZUhhc2hlcihzZWNwMjU2cjEuUHJvamVjdGl2ZVBvaW50LCAoc2NhbGFycykgPT4gbWFwU1dVKHNjYWxhcnNbMF0pLCB7XG4gICAgRFNUOiAnUDI1Nl9YTUQ6U0hBLTI1Nl9TU1dVX1JPXycsXG4gICAgZW5jb2RlRFNUOiAnUDI1Nl9YTUQ6U0hBLTI1Nl9TU1dVX05VXycsXG4gICAgcDogRnAuT1JERVIsXG4gICAgbTogMSxcbiAgICBrOiAxMjgsXG4gICAgZXhwYW5kOiAneG1kJyxcbiAgICBoYXNoOiBzaGEyNTYsXG59KSkoKTtcbmV4cG9ydCBjb25zdCBoYXNoVG9DdXJ2ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaHRmLmhhc2hUb0N1cnZlKSgpO1xuZXhwb3J0IGNvbnN0IGVuY29kZVRvQ3VydmUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGh0Zi5lbmNvZGVUb0N1cnZlKSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cDI1Ni5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/esm/p256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLDBEQUEwRCxFQUFFO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsa0JBQWtCLFNBQVM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixJQUFJO0FBQ3JGO0FBQ0E7QUFDcUQ7QUFDckQsaUJBQWlCO0FBQ2pCLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanM/MDI1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgcG9zaXRpdmUgaW50ZWdlciBleHBlY3RlZCwgbm90ICR7bn1gKTtcbn1cbmZ1bmN0aW9uIGJvb2woYikge1xuICAgIGlmICh0eXBlb2YgYiAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJvb2xlYW4gZXhwZWN0ZWQsIG5vdCAke2J9YCk7XG59XG4vLyBjb3BpZWQgZnJvbSB1dGlsc1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiAoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHxcbiAgICAgICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIWlzQnl0ZXMoYikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVpbnQ4QXJyYXkgZXhwZWN0ZWQgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaCkge1xuICAgIGlmICh0eXBlb2YgaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fbWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEM7QUFDUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsMkNBQUk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBVTtBQUM5QjtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLGdCQUFnQix5QkFBeUI7QUFDekMsZUFBZSxrREFBTztBQUN0QjtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxxREFBVTtBQUMzQyx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0MsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX21kLmpzPzMxM2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzLCBvdXRwdXQgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgY3JlYXRlVmlldywgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIENob2ljZTogYSA/IGIgOiBjXG5leHBvcnQgY29uc3QgQ2hpID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAofmEgJiBjKTtcbi8vIE1ham9yaXR5IGZ1bmN0aW9uLCB0cnVlIGlmIGFueSB0d28gaW5wdXN0IGlzIHRydWVcbmV4cG9ydCBjb25zdCBNYWogPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuLyoqXG4gKiBNZXJrbGUtRGFtZ2FyZCBoYXNoIGNvbnN0cnVjdGlvbiBiYXNlIGNsYXNzLlxuICogQ291bGQgYmUgdXNlZCB0byBjcmVhdGUgTUQ1LCBSSVBFTUQsIFNIQTEsIFNIQTIuXG4gKi9cbmV4cG9ydCBjbGFzcyBIYXNoTUQgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBjb25zdCB7IHZpZXcsIGJ1ZmZlciwgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICAvLyBGYXN0IHBhdGg6IHdlIGhhdmUgYXQgbGVhc3Qgb25lIGJsb2NrIGluIGlucHV0LCBjYXN0IGl0IHRvIHZpZXcgYW5kIHByb2Nlc3NcbiAgICAgICAgICAgIGlmICh0YWtlID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gY3JlYXRlVmlldyhkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYmxvY2tMZW4gPD0gbGVuIC0gcG9zOyBwb3MgKz0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyhkYXRhVmlldywgcG9zKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoZGF0YS5zdWJhcnJheShwb3MsIHBvcyArIHRha2UpLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xuICAgICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yb3VuZENsZWFuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIG91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpblxuICAgICAgICAvLyBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9tZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzNCLGVBQWUsMk1BQUUsV0FBVywyTUFBRSxpQkFBaUIsME5BQWlCLEdBQUcsa0RBQVk7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG9Ob2RlLmpzP2Y1NTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBTZWUgdXRpbHMudHMgZm9yIGRldGFpbHMuXG4vLyBUaGUgZmlsZSB3aWxsIHRocm93IG9uIG5vZGUuanMgMTQgYW5kIGVhcmxpZXIuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuYyA/IG5jLndlYmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0c7QUFDckQ7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFVO0FBQ2xCLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQixRQUFRLGlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcz9kYzU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc2ggYXMgYXNzZXJ0SGFzaCwgYnl0ZXMgYXMgYXNzZXJ0Qnl0ZXMsIGV4aXN0cyBhcyBhc3NlcnRFeGlzdHMgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gSE1BQyAoUkZDIDIxMDQpXG5leHBvcnQgY2xhc3MgSE1BQyBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGhhc2gsIF9rZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBhc3NlcnRIYXNoKGhhc2gpO1xuICAgICAgICBjb25zdCBrZXkgPSB0b0J5dGVzKF9rZXkpO1xuICAgICAgICB0aGlzLmlIYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSB0aGlzLmlIYXNoLmJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IHRoaXMuaUhhc2gub3V0cHV0TGVuO1xuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XG4gICAgICAgIGNvbnN0IHBhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgLy8gYmxvY2tMZW4gY2FuIGJlIGJpZ2dlciB0aGFuIG91dHB1dExlblxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2O1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICAvLyBCeSBkb2luZyB1cGRhdGUgKHByb2Nlc3Npbmcgb2YgZmlyc3QgYmxvY2spIG9mIG91dGVyIGhhc2ggaGVyZSB3ZSBjYW4gcmUtdXNlIGl0IGJldHdlZW4gbXVsdGlwbGUgY2FsbHMgdmlhIGNsb25lXG4gICAgICAgIHRoaXMub0hhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNiBeIDB4NWM7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIHBhZC5maWxsKDApO1xuICAgIH1cbiAgICB1cGRhdGUoYnVmKSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgYXNzZXJ0Qnl0ZXMob3V0LCB0aGlzLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZSB3aXRob3V0IGNhbGxpbmcgY29uc3RydWN0b3Igc2luY2Uga2V5IGFscmVhZHkgaW4gc3RhdGUgYW5kIHdlIGRvbid0IGtub3cgaXQuXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xuICAgICAgICBjb25zdCB7IG9IYXNoLCBpSGFzaCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgYmxvY2tMZW4sIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdG8gPSB0bztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICB0by5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLm9IYXNoID0gb0hhc2guX2Nsb25lSW50byh0by5vSGFzaCk7XG4gICAgICAgIHRvLmlIYXNoID0gaUhhc2guX2Nsb25lSW50byh0by5pSGFzaCk7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9IYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pSGFzaC5kZXN0cm95KCk7XG4gICAgfVxufVxuLyoqXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cbiAqIEBwYXJhbSBoYXNoIC0gZnVuY3Rpb24gdGhhdCB3b3VsZCBiZSB1c2VkIGUuZy4gc2hhMjU2XG4gKiBAcGFyYW0ga2V5IC0gbWVzc2FnZSBrZXlcbiAqIEBwYXJhbSBtZXNzYWdlIC0gbWVzc2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/encoding/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\n// Polyfill btoa with a pure JS implementation. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSx3RkFBd0YsaUJBQWlCLGNBQWMsRUFBRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHO0FBQ2hHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2VuY29kaW5nL2Rpc3QvaW5kZXgubWpzPzlhNTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi93ZWJhdXRobi1qc29uL2Jsb2IvZTkzMmIzNTg1ZmE3MGIwYmQ1YjVhNDAxMmJhN2RiYWQ3YjBhMGQwZi9zcmMvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwudHMjTDIzXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKGlucHV0KSB7XG4gICAgLy8gc3RyaW5nIHRvIGJhc2U2NCAtLSB3ZSBkbyBub3QgcmVseSBvbiB0aGUgYnJvd3NlcidzIGJ0b2Egc2luY2UgaXQncyBub3QgcHJlc2VudCBpbiBSZWFjdCBOYXRpdmUgZW52aXJvbm1lbnRzXG4gICAgY29uc3QgYmFzZTY0U3RyaW5nID0gYnRvYShpbnB1dCk7XG4gICAgcmV0dXJuIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhiYXNlNjRTdHJpbmcpO1xufVxuZnVuY3Rpb24gYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKS5yZXBsYWNlKC89L2csIFwiXCIpO1xufVxuZnVuY3Rpb24gdWludDhBcnJheVRvSGV4U3RyaW5nKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIiksIFwiXCIpO1xufVxuLy8gUG9seWZpbGwgYnRvYSB3aXRoIGEgcHVyZSBKUyBpbXBsZW1lbnRhdGlvbi4gVGhpcyBpcyBhZGFwdGVkIGZyb20gdGhlIGZvbGxvd2luZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9hYmFiL2Jsb2IvODA4NzRhZTFmZTFjZGUyZTU4N2JiNmU1MWI2ZDdjOWI0MmNhMWQzNC9saWIvYnRvYS5qc1xuZnVuY3Rpb24gYnRvYShzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgfVxuICAgIGxldCBpO1xuICAgIC8vIFN0cmluZyBjb252ZXJzaW9uIGFzIHJlcXVpcmVkIGJ5IFdlYiBJREwuXG4gICAgcyA9IGAke3N9YDtcbiAgICAvLyBcIlRoZSBidG9hKCkgbWV0aG9kIG11c3QgdGhyb3cgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiBET01FeGNlcHRpb24gaWZcbiAgICAvLyBkYXRhIGNvbnRhaW5zIGFueSBjaGFyYWN0ZXIgd2hvc2UgY29kZSBwb2ludCBpcyBncmVhdGVyIHRoYW4gVSswMEZGLlwiXG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHMuY2hhckNvZGVBdChpKSA+IDI1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IGZvdW5kIGNvZGUgcG9pbnQgZ3JlYXRlciB0aGFuIDI1NToke3MuY2hhckNvZGVBdChpKX0gYXQgcG9zaXRpb24gJHtpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBvdXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNvbnN0IGdyb3Vwc09mU2l4ID0gW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBdO1xuICAgICAgICBncm91cHNPZlNpeFswXSA9IHMuY2hhckNvZGVBdChpKSA+PiAyO1xuICAgICAgICBncm91cHNPZlNpeFsxXSA9IChzLmNoYXJDb2RlQXQoaSkgJiAweDAzKSA8PCA0O1xuICAgICAgICBpZiAocy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gfD0gcy5jaGFyQ29kZUF0KGkgKyAxKSA+PiA0O1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMl0gPSAocy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4MGYpIDw8IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDIpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdIHw9IHMuY2hhckNvZGVBdChpICsgMikgPj4gNjtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzNdID0gcy5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4M2Y7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cHNPZlNpeC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cHNPZlNpeFtqXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIj1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBidG9hTG9va3VwKGdyb3Vwc09mU2l4W2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gYnRvYUxvb2t1cChpbmRleCkge1xuICAgIC8qKlxuICAgICAqIExvb2t1cCB0YWJsZSBmb3IgYnRvYSgpLCB3aGljaCBjb252ZXJ0cyBhIHNpeC1iaXQgbnVtYmVyIGludG8gdGhlXG4gICAgICogY29ycmVzcG9uZGluZyBBU0NJSSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgY29uc3Qga2V5c3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCkge1xuICAgICAgICByZXR1cm4ga2V5c3RyW2luZGV4XTtcbiAgICB9XG4gICAgLy8gVGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSIGV4Y2VwdGlvbiBoZXJlIC0tIHdvbid0IGJlIGhpdCBpbiB0aGUgdGVzdHMuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nLCBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZywgdWludDhBcnJheVRvSGV4U3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get all suborg IDs associated given a parent org ID and an optional filter.\n         *\n         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).\n         *\n         * See also {@link stampGetSubOrgIds}.\n         */\n        this.getSubOrgIds = async (input) => {\n            return this.request(\"/public/v1/query/list_suborgs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetSubOrgIds}.\n         */\n        this.stampGetSubOrgIds = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_suborgs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Policies\n         *\n         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).\n         *\n         * See also {@link stampCreatePolicies}.\n         */\n        this.createPolicies = async (input) => {\n            return this.request(\"/public/v1/submit/create_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicies}.\n         */\n        this.stampCreatePolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Private Key Tags within an Organization\n         *\n         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).\n         *\n         * See also {@link stampDeletePrivateKeyTags}.\n         */\n        this.deletePrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePrivateKeyTags}.\n         */\n        this.stampDeletePrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete User Tags within an Organization\n         *\n         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).\n         *\n         * See also {@link stampDeleteUserTags}.\n         */\n        this.deleteUserTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUserTags}.\n         */\n        this.stampDeleteUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Users within an Organization\n         *\n         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).\n         *\n         * See also {@link stampDeleteUsers}.\n         */\n        this.deleteUsers = async (input) => {\n            return this.request(\"/public/v1/submit/delete_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUsers}.\n         */\n        this.stampDeleteUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a private key\n         *\n         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).\n         *\n         * See also {@link stampImportPrivateKey}.\n         */\n        this.importPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportPrivateKey}.\n         */\n        this.stampImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a wallet\n         *\n         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).\n         *\n         * See also {@link stampImportWallet}.\n         */\n        this.importWallet = async (input) => {\n            return this.request(\"/public/v1/submit/import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportWallet}.\n         */\n        this.stampImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new private key import\n         *\n         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).\n         *\n         * See also {@link stampInitImportPrivateKey}.\n         */\n        this.initImportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportPrivateKey}.\n         */\n        this.stampInitImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new wallet import\n         *\n         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).\n         *\n         * See also {@link stampInitImportWallet}.\n         */\n        this.initImportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportWallet}.\n         */\n        this.stampInitImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign multiple raw payloads with the same signing parameters\n         *\n         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).\n         *\n         * See also {@link stampSignRawPayloads}.\n         */\n        this.signRawPayloads = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payloads\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayloads}.\n         */\n        this.stampSignRawPayloads = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payloads\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createPolicies: () => (/* binding */ createPolicies),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),\n/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),\n/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),\n/* harmony export */   importWallet: () => (/* binding */ importWallet),\n/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),\n/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),\n/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),\n/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),\n/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),\n/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),\n/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Suborgs\n *\n * Get all suborg IDs associated given a parent org ID and an optional filter.\n *\n * `POST /public/v1/query/list_suborgs`\n */\nconst getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_suborgs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetSubOrgIds}\n */\nconst signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_suborgs\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * `POST /public/v1/submit/create_policies`\n */\nconst createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicies}\n */\nconst signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policies\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Private Key Tags\n *\n * Delete Private Key Tags within an Organization\n *\n * `POST /public/v1/submit/delete_private_key_tags`\n */\nconst deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePrivateKeyTags}\n */\nconst signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete User Tags\n *\n * Delete User Tags within an Organization\n *\n * `POST /public/v1/submit/delete_user_tags`\n */\nconst deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUserTags}\n */\nconst signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Users\n *\n * Delete Users within an Organization\n *\n * `POST /public/v1/submit/delete_users`\n */\nconst deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUsers}\n */\nconst signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_users\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Import Private Key\n *\n * Imports a private key\n *\n * `POST /public/v1/submit/import_private_key`\n */\nconst importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportPrivateKey}\n */\nconst signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Import Wallet\n *\n * Imports a wallet\n *\n * `POST /public/v1/submit/import_wallet`\n */\nconst importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportWallet}\n */\nconst signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * `POST /public/v1/submit/init_import_private_key`\n */\nconst initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportPrivateKey}\n */\nconst signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Wallet\n *\n * Initializes a new wallet import\n *\n * `POST /public/v1/submit/init_import_wallet`\n */\nconst initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportWallet}\n */\nconst signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payloads\n *\n * Sign multiple raw payloads with the same signing parameters\n *\n * `POST /public/v1/submit/sign_raw_payloads`\n */\nconst signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayloads}\n */\nconst signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/async.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/async.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/base.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/base.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/config.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/config.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2NvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixLQUFLO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFMEQ7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2NvbmZpZy5tanM/ZGFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XG4gICAgYXBpUHVibGljS2V5OiBudWxsLFxuICAgIGFwaVByaXZhdGVLZXk6IG51bGwsXG4gICAgYmFzZVVybDogbnVsbCxcbn07XG5jb25zdCBicm93c2VyQ29uZmlnID0ge1xuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGJyb3dzZXJJbml0KHZhbHVlKSB7XG4gICAgYnJvd3NlckNvbmZpZy5iYXNlVXJsID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYmFzZVVybCwgXCJiYXNlVXJsXCIpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGluaXQodmFsdWUpIHtcbiAgICBjb25maWcuYXBpUHVibGljS2V5ID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKTtcbiAgICBjb25maWcuYXBpUHJpdmF0ZUtleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKTtcbiAgICBjb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlQdWJsaWNLZXk6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGNvbmZpZy5hcGlQdWJsaWNLZXksIFwiYXBpUHVibGljS2V5XCIpLFxuICAgICAgICBhcGlQcml2YXRlS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHJpdmF0ZUtleSwgXCJhcGlQcml2YXRlS2V5XCIpLFxuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VVcmw6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGJyb3dzZXJDb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eVN0cmluZyhpbnB1dCwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIgfHwgIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnQgeyBicm93c2VySW5pdCwgZ2V0QnJvd3NlckNvbmZpZywgZ2V0Q29uZmlnLCBpbml0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE0RztBQUNQO0FBQ3BEO0FBQ3lCO0FBQ3RCO0FBQ0k7QUFDYTtBQUM3Qjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZGQUFrQjs7QUFFbUI7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2luZGV4Lm1qcz81NmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHB1YmxpY19hcGlfZmV0Y2hlciBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuZmV0Y2hlci5tanMnO1xuZXhwb3J0IHsgVHVybmtleUNsaWVudCB9IGZyb20gJy4vX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5jbGllbnQubWpzJztcbmV4cG9ydCB7IGJyb3dzZXJJbml0LCBpbml0IH0gZnJvbSAnLi9jb25maWcubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlSZXF1ZXN0RXJyb3IsIHNlYWxBbmRTdGFtcFJlcXVlc3RCb2R5IH0gZnJvbSAnLi9iYXNlLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5leHBvcnQgeyBnZXRXZWJBdXRobkF0dGVzdGF0aW9uIH0gZnJvbSAnLi93ZWJhdXRobi5tanMnO1xuZXhwb3J0IHsgY3JlYXRlQWN0aXZpdHlQb2xsZXIsIHdpdGhBc3luY1BvbGxpbmcgfSBmcm9tICcuL2FzeW5jLm1qcyc7XG5leHBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uLm1qcyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBUdXJua2V5QXBpYCBpbnN0ZWFkXG4gKi9cbmNvbnN0IFB1YmxpY0FwaVNlcnZpY2UgPSBwdWJsaWNfYXBpX2ZldGNoZXI7XG5cbmV4cG9ydCB7IFB1YmxpY0FwaVNlcnZpY2UsIHB1YmxpY19hcGlfZmV0Y2hlciBhcyBUdXJua2V5QXBpIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/shared.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/shared.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxnQkFBZ0IsMkRBQTJEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9zaGFyZWQubWpzPzg5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVHVybmtleUFjdGl2aXR5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlLCBjYXVzZSwgYWN0aXZpdHlJZCwgYWN0aXZpdHlTdGF0dXMsIGFjdGl2aXR5VHlwZSB9ID0gaW5wdXQ7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlR1cm5rZXlBY3Rpdml0eUVycm9yXCI7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlJZCA9IGFjdGl2aXR5SWQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5hY3Rpdml0eVN0YXR1cyA9IGFjdGl2aXR5U3RhdHVzID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlUeXBlID0gYWN0aXZpdHlUeXBlID8/IG51bGw7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZSA/PyBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/universal.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/universal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0E7QUFDQSxjQUFjLDhDQUFPOztBQUVKO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC91bml2ZXJzYWwubWpzPzgxYmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmV0Y2ggYXMgZmV0Y2gkMSB9IGZyb20gJ2Nyb3NzLWZldGNoJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIFRoaXMgaXMgdXNlZnVsIGZvciBtb2NraW5nIGZldGNoIGluIHRlc3RzLlxuY29uc3QgZmV0Y2ggPSBmZXRjaCQxO1xuXG5leHBvcnQgeyBmZXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdmVyc2FsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/version.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/version.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.10.0\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3ZlcnNpb24ubWpzP2E3NTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVkVSU0lPTiA9IFwiQHR1cm5rZXkvaHR0cEAyLjEwLjBcIjtcblxuZXhwb3J0IHsgVkVSU0lPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNaO0FBQzREOztBQUVwRztBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSwyRUFBa0M7QUFDeEU7QUFDQTtBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSx5RUFBZ0M7QUFDdEU7O0FBRW1EO0FBQ25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanM/MTI1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgY3JlZGVudGlhbCk7XG59XG5mdW5jdGlvbiBnZXRSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uLCBjcmVkZW50aWFsKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVzcG9uc2VUb0pTT04sIGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcz8wNjdjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9jb252ZXJ0Lm1qcz84OWI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTs7QUFFcEU7QUFDQTtBQUNBLDRCQUE0Qiw4REFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQWlCO0FBQzdDO0FBQ0E7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcz9jNDVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9IGZyb20gJy4vYXBpLm1qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmNyZWF0ZShvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gY3JlYXRlUmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldChvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldChvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gZ2V0UmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlLCBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUY7O0FBRXJGO0FBQ0EsV0FBVyxzREFBUSxDQUFDLG1EQUFTO0FBQzdCLGtCQUFrQixzREFBUSxDQUFDLG1EQUFTO0FBQ3BDLGVBQWUsc0RBQVEsQ0FBQyxtREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG9CQUFvQixxREFBTyxDQUFDLG1EQUFTO0FBQ3JDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxtQkFBbUIsc0RBQVEsQ0FBQyxzREFBWTtBQUN4QyxvQkFBb0Isc0RBQVEsQ0FBQyxzREFBWTtBQUN6QyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DOztBQUVnRjtBQUNoRiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9zY2hlbWEubWpzPzRhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWlyZWQsIG9wdGlvbmFsLCBkZXJpdmVkLCBjb3B5VmFsdWUsIGNvbnZlcnRWYWx1ZSB9IGZyb20gJy4vY29udmVydC5tanMnO1xuXG5jb25zdCBzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSA9IHtcbiAgICBhcHBpZDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBhcHBpZEV4Y2x1ZGU6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgY3JlZFByb3BzOiBvcHRpb25hbChjb3B5VmFsdWUpLFxufTtcbi8vIGBuYXZpZ2F0b3IuY3JlYXRlKClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB0cmFuc3BvcnRzOiBkZXJpdmVkKGNvcHlWYWx1ZSwgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5nZXRUcmFuc3BvcnRzPy4oKSB8fCBbXSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEOztBQUV4RCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw2REFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZGO0FBQzdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi5tanM/NmMyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUsIGdldCB9IGZyb20gJy4vd2ViYXV0aG4tanNvbi9pbmRleC5tanMnO1xuXG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuY29uc3QgZGVmYXVsdFNpZ25pbmdPcHRpb25zID0ge1xuICAgIHB1YmxpY0tleToge1xuICAgICAgICB0aW1lb3V0OiBkZWZhdWx0VGltZW91dCxcbiAgICAgICAgdXNlclZlcmlmaWNhdGlvbjogZGVmYXVsdFVzZXJWZXJpZmljYXRpb24sXG4gICAgfSxcbn07XG5hc3luYyBmdW5jdGlvbiBnZXRDcmVkZW50aWFsUmVxdWVzdE9wdGlvbnMocGF5bG9hZCwgdGtTaWduaW5nT3B0aW9ucyA9IGRlZmF1bHRTaWduaW5nT3B0aW9ucykge1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGF3YWl0IGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpO1xuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0ge1xuICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLFxuICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLnB1YmxpY0tleSxcbiAgICAgICAgICAgIGNoYWxsZW5nZSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzaWduaW5nT3B0aW9ucztcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBheWxvYWQpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgbWVzc2FnZUJ1ZmZlcik7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gQnVmZmVyLmZyb20oaGFzaEJ1ZmZlcikudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgaGV4QnVmZmVyID0gQnVmZmVyLmZyb20oaGV4U3RyaW5nLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhleEJ1ZmZlcik7XG59XG4vKiBQdWxsZWQgZnJvbSBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4tMi8jZW51bS10cmFuc3BvcnQgKi9cbmZ1bmN0aW9uIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtKHByb3RvY29sRW51bSkge1xuICAgIHN3aXRjaCAocHJvdG9jb2xFbnVtKSB7XG4gICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9JTlRFUk5BTFwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ1c2JcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfVVNCXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIm5mY1wiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9ORkNcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmxlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0JMRVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJoeWJyaWRcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSFlCUklEXCI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgdHJhbnNwb3J0IGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRvSW50ZXJuYWxBdHRlc3RhdGlvbihhdHRlc3RhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWRlbnRpYWxJZDogYXR0ZXN0YXRpb24ucmF3SWQsXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiBhdHRlc3RhdGlvbi5yZXNwb25zZS5hdHRlc3RhdGlvbk9iamVjdCxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGF0dGVzdGF0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICB0cmFuc3BvcnRzOiBhdHRlc3RhdGlvbi5yZXNwb25zZS50cmFuc3BvcnRzLm1hcChwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSksXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXNzZXJ0aW9uKHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0gYXdhaXQgZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGNsaWVudEdldFJlc3VsdCA9IGF3YWl0IGdldChzaWduaW5nT3B0aW9ucyk7XG4gICAgY29uc3QgYXNzZXJ0aW9uID0gY2xpZW50R2V0UmVzdWx0LnRvSlNPTigpO1xuICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogYXNzZXJ0aW9uLnJlc3BvbnNlLmF1dGhlbnRpY2F0b3JEYXRhLFxuICAgICAgICBjbGllbnREYXRhSnNvbjogYXNzZXJ0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgc2lnbmF0dXJlOiBhc3NlcnRpb24ucmVzcG9uc2Uuc2lnbmF0dXJlLFxuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YW1wKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHdlYkF1dGhuU3VwcG9ydGVkID0gaGFzV2ViQXV0aG5TdXBwb3J0KCk7XG4gICAgaWYgKCF3ZWJBdXRoblN1cHBvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJhdXRobiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclwiKTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlKG9wdGlvbnMpO1xuICAgIHJldHVybiB0b0ludGVybmFsQXR0ZXN0YXRpb24ocmVzLnRvSlNPTigpKTtcbn1cbi8vIGBoYXNXZWJBdXRoblN1cHBvcnRgIGNoZWNrcyBmb3IgYmFyZWJvbmVzIHdlYmF1dGhuIHN1cHBvcnQuXG4vLyBGb3IgYWRkaXRpb25hbCBkZXRhaWxzIGFuZCBncmFudWxhciBzZXR0aW5ncywgc2VlOlxuLy8gaHR0cHM6Ly93ZWIuZGV2L2FydGljbGVzL3Bhc3NrZXktZm9ybS1hdXRvZmlsbCNmZWF0dXJlLWRldGVjdGlvbiwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1B1YmxpY0tleUNyZWRlbnRpYWxcbmZ1bmN0aW9uIGhhc1dlYkF1dGhuU3VwcG9ydCgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuUHVibGljS2V5Q3JlZGVudGlhbDtcbn1cblxuZXhwb3J0IHsgZ2V0V2ViQXV0aG5Bc3NlcnRpb24sIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24sIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJhdXRobi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),\n/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),\n/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// Set of constants for event types expected to be sent and received between a parent page and its iframe.\nvar IframeEventType;\n(function (IframeEventType) {\n    // Event sent by the iframe to its parent to indicate readiness.\n    // Value: the iframe public key\n    IframeEventType[\"PublicKeyReady\"] = \"PUBLIC_KEY_READY\";\n    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectCredentialBundle\"] = \"INJECT_CREDENTIAL_BUNDLE\";\n    // Event sent by the parent to inject a private key export bundle into the iframe.\n    // Value: the bundle to inject\n    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.\n    IframeEventType[\"InjectKeyExportBundle\"] = \"INJECT_KEY_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject a wallet export bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectWalletExportBundle\"] = \"INJECT_WALLET_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject an import bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectImportBundle\"] = \"INJECT_IMPORT_BUNDLE\";\n    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.\n    // Value: none\n    IframeEventType[\"ExtractWalletEncryptedBundle\"] = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to extract an encrypted private key bundle from the iframe.\n    // Value: none\n    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    IframeEventType[\"ExtractKeyEncryptedBundle\"] = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\";\n    // Event sent by the iframe to its parent when `InjectBundle` is successful\n    // Value: true (boolean)\n    IframeEventType[\"BundleInjected\"] = \"BUNDLE_INJECTED\";\n    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful\n    // Value: the bundle encrypted in the iframe\n    IframeEventType[\"EncryptedBundleExtracted\"] = \"ENCRYPTED_BUNDLE_EXTRACTED\";\n    // Event sent by the parent page to request a signature\n    // Value: payload to sign\n    IframeEventType[\"StampRequest\"] = \"STAMP_REQUEST\";\n    // Event sent by the iframe to communicate the result of a stamp operation.\n    // Value: signed payload\n    IframeEventType[\"Stamp\"] = \"STAMP\";\n    // Event sent by the iframe to communicate an error\n    // Value: serialized error\n    IframeEventType[\"Error\"] = \"ERROR\";\n})(IframeEventType || (IframeEventType = {}));\n// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it\n// or after exporting it and decrypting it.\nvar KeyFormat;\n(function (KeyFormat) {\n    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys\n    KeyFormat[\"Hexadecimal\"] = \"HEXADECIMAL\";\n    // Key format used by Phantom and Solflare for Solana keys\n    KeyFormat[\"Solana\"] = \"SOLANA\";\n})(KeyFormat || (KeyFormat = {}));\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n * Creating a stamper inserts an iframe in the current page.\n */\nclass IframeStamper {\n    /**\n     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.\n     * Call `.init()` to insert the iframe element in the DOM.\n     */\n    constructor(config) {\n        if (typeof window === \"undefined\") {\n            throw new Error(\"Cannot initialize iframe in non-browser environment\");\n        }\n        if (!config.iframeContainer) {\n            throw new Error(\"Iframe container cannot be found\");\n        }\n        this.container = config.iframeContainer;\n        if (this.container.querySelector(`#${config.iframeElementId}`)) {\n            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);\n        }\n        let iframe = window.document.createElement(\"iframe\");\n        iframe.id = config.iframeElementId;\n        iframe.src = config.iframeUrl;\n        this.iframe = iframe;\n        const iframeUrl = new URL(config.iframeUrl);\n        this.iframeOrigin = iframeUrl.origin;\n        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!\n        this.iframePublicKey = null;\n    }\n    /**\n     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key\n     */\n    async init() {\n        this.container.appendChild(this.iframe);\n        return new Promise((resolve, _reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out\n                    return;\n                }\n                if (event.data?.type === IframeEventType.PublicKeyReady) {\n                    this.iframePublicKey = event.data[\"value\"];\n                    resolve(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Removes the iframe from the DOM\n     */\n    clear() {\n        this.iframe.remove();\n    }\n    /**\n     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.\n     */\n    publicKey() {\n        return this.iframePublicKey;\n    }\n    /**\n     * Function to inject a new credential into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during recovery and auth flows.\n     */\n    async injectCredentialBundle(bundle) {\n        return new Promise((resolve, reject) => {\n            this.iframe.contentWindow?.postMessage({\n                type: IframeEventType.InjectCredentialBundle,\n                value: bundle,\n            }, \"*\");\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key export flow.\n     */\n    async injectKeyExportBundle(bundle, keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectKeyExportBundle,\n            value: bundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet export flow.\n     */\n    async injectWalletExportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectWalletExportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an import bundle into the iframe\n     * This is used to initiate either the wallet import flow or the private key import flow.\n     */\n    async injectImportBundle(bundle) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectImportBundle,\n            value: bundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet import flow.\n     */\n    async extractWalletEncryptedBundle() {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractWalletEncryptedBundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key import flow.\n     */\n    async extractKeyEncryptedBundle(keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractKeyEncryptedBundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to sign a payload with the underlying iframe\n     */\n    async stamp(payload) {\n        if (this.iframePublicKey === null) {\n            throw new Error(\"null iframe public key. Have you called/awaited .init()?\");\n        }\n        const iframeOrigin = this.iframeOrigin;\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.StampRequest,\n            value: payload,\n        }, \"*\");\n        return new Promise(function (resolve, reject) {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.Stamp) {\n                    resolve({\n                        stampHeaderName: stampHeaderName,\n                        stampHeaderValue: event.data[\"value\"],\n                    });\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/solana/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeySigner: () => (/* binding */ TurnkeySigner)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.cjs.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/index.mjs\");\n\n\n\nclass TurnkeySigner {\n    constructor(input) {\n        this.organizationId = input.organizationId;\n        this.client = input.client;\n    }\n    /**\n     * This function takes a Solana transaction and adds a signature with Turnkey\n     *\n     * @param tx Transaction object (native @solana/web3.js type)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async addSignature(tx, fromAddress) {\n        const fromKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(fromAddress);\n        const messageToSign = tx.serializeMessage();\n        const signRawPayloadResult = await this.signRawPayload(messageToSign.toString(\"hex\"), fromAddress);\n        const signature = `${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`;\n        tx.addSignature(fromKey, Buffer.from(signature, \"hex\"));\n    }\n    /**\n     * This function takes a message and returns it after being signed with Turnkey\n     *\n     * @param message The message to sign (Uint8Array)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async signMessage(message, fromAddress) {\n        const signRawPayloadResult = await this.signRawPayload(Buffer.from(message).toString(\"hex\"), fromAddress);\n        return Buffer.from(`${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`, \"hex\");\n    }\n    async signRawPayload(payload, signWith) {\n        const response = await this.client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: this.organizationId,\n            timestampMs: String(Date.now()),\n            parameters: {\n                signWith,\n                payload,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                // Note: unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032).\n                // Turnkey's signer requires an explicit value to be passed here to minimize ambiguity.\n                hashFunction: \"HASH_FUNCTION_NOT_APPLICABLE\",\n            },\n        });\n        const { id, status, type, result } = response.activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                message: `Expected COMPLETED status, got ${status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return result;\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUNTOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQVM7QUFDckM7QUFDQTtBQUNBLDZCQUE2Qiw2Q0FBNkMsRUFBRSw2Q0FBNkM7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkNBQTZDLEVBQUUsNkNBQTZDO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxnQkFBZ0IsMkJBQTJCO0FBQzNDO0FBQ0Esc0JBQXNCLCtEQUFvQjtBQUMxQywyREFBMkQsT0FBTztBQUNsRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9kaXN0L2luZGV4Lm1qcz8xMTRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFB1YmxpY0tleSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7XG5pbXBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9IGZyb20gJ0B0dXJua2V5L2h0dHAnO1xuXG5jbGFzcyBUdXJua2V5U2lnbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gaW5wdXQub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gaW5wdXQuY2xpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgU29sYW5hIHRyYW5zYWN0aW9uIGFuZCBhZGRzIGEgc2lnbmF0dXJlIHdpdGggVHVybmtleVxuICAgICAqXG4gICAgICogQHBhcmFtIHR4IFRyYW5zYWN0aW9uIG9iamVjdCAobmF0aXZlIEBzb2xhbmEvd2ViMy5qcyB0eXBlKVxuICAgICAqIEBwYXJhbSBmcm9tQWRkcmVzcyBTb2xhbmEgYWRkcmVzcyAoYmFzZTU4IGVuY29kZWQpXG4gICAgICovXG4gICAgYXN5bmMgYWRkU2lnbmF0dXJlKHR4LCBmcm9tQWRkcmVzcykge1xuICAgICAgICBjb25zdCBmcm9tS2V5ID0gbmV3IFB1YmxpY0tleShmcm9tQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VUb1NpZ24gPSB0eC5zZXJpYWxpemVNZXNzYWdlKCk7XG4gICAgICAgIGNvbnN0IHNpZ25SYXdQYXlsb2FkUmVzdWx0ID0gYXdhaXQgdGhpcy5zaWduUmF3UGF5bG9hZChtZXNzYWdlVG9TaWduLnRvU3RyaW5nKFwiaGV4XCIpLCBmcm9tQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGAke3NpZ25SYXdQYXlsb2FkUmVzdWx0LnNpZ25SYXdQYXlsb2FkUmVzdWx0Py5yfSR7c2lnblJhd1BheWxvYWRSZXN1bHQuc2lnblJhd1BheWxvYWRSZXN1bHQ/LnN9YDtcbiAgICAgICAgdHguYWRkU2lnbmF0dXJlKGZyb21LZXksIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSwgXCJoZXhcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgbWVzc2FnZSBhbmQgcmV0dXJucyBpdCBhZnRlciBiZWluZyBzaWduZWQgd2l0aCBUdXJua2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzaWduIChVaW50OEFycmF5KVxuICAgICAqIEBwYXJhbSBmcm9tQWRkcmVzcyBTb2xhbmEgYWRkcmVzcyAoYmFzZTU4IGVuY29kZWQpXG4gICAgICovXG4gICAgYXN5bmMgc2lnbk1lc3NhZ2UobWVzc2FnZSwgZnJvbUFkZHJlc3MpIHtcbiAgICAgICAgY29uc3Qgc2lnblJhd1BheWxvYWRSZXN1bHQgPSBhd2FpdCB0aGlzLnNpZ25SYXdQYXlsb2FkKEJ1ZmZlci5mcm9tKG1lc3NhZ2UpLnRvU3RyaW5nKFwiaGV4XCIpLCBmcm9tQWRkcmVzcyk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShgJHtzaWduUmF3UGF5bG9hZFJlc3VsdC5zaWduUmF3UGF5bG9hZFJlc3VsdD8ucn0ke3NpZ25SYXdQYXlsb2FkUmVzdWx0LnNpZ25SYXdQYXlsb2FkUmVzdWx0Py5zfWAsIFwiaGV4XCIpO1xuICAgIH1cbiAgICBhc3luYyBzaWduUmF3UGF5bG9hZChwYXlsb2FkLCBzaWduV2l0aCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LnNpZ25SYXdQYXlsb2FkKHtcbiAgICAgICAgICAgIHR5cGU6IFwiQUNUSVZJVFlfVFlQRV9TSUdOX1JBV19QQVlMT0FEX1YyXCIsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogdGhpcy5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcE1zOiBTdHJpbmcoRGF0ZS5ub3coKSksXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgICAgc2lnbldpdGgsXG4gICAgICAgICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJQQVlMT0FEX0VOQ09ESU5HX0hFWEFERUNJTUFMXCIsXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogdW5saWtlIEVDRFNBLCBFZERTQSdzIEFQSSBkb2VzIG5vdCBzdXBwb3J0IHNpZ25pbmcgcmF3IGRpZ2VzdHMgKHNlZSBSRkMgODAzMikuXG4gICAgICAgICAgICAgICAgLy8gVHVybmtleSdzIHNpZ25lciByZXF1aXJlcyBhbiBleHBsaWNpdCB2YWx1ZSB0byBiZSBwYXNzZWQgaGVyZSB0byBtaW5pbWl6ZSBhbWJpZ3VpdHkuXG4gICAgICAgICAgICAgICAgaGFzaEZ1bmN0aW9uOiBcIkhBU0hfRlVOQ1RJT05fTk9UX0FQUExJQ0FCTEVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGlkLCBzdGF0dXMsIHR5cGUsIHJlc3VsdCB9ID0gcmVzcG9uc2UuYWN0aXZpdHk7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IFwiQUNUSVZJVFlfU1RBVFVTX0NPTVBMRVRFRFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCBDT01QTEVURUQgc3RhdHVzLCBnb3QgJHtzdGF0dXN9YCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBpZCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUdXJua2V5U2lnbmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5jbGllbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEQ7QUFDVDtBQUNBOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRCQUE0QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkJBQTZCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsY0FBYztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQkFBcUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZ0JBQWdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4QkFBOEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDBCQUEwQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQkFBcUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOEJBQThCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQ0FBZ0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMkJBQTJCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZCQUE2QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwrQkFBK0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZCQUE2QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUNBQWlDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRCQUE0QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5QkFBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQ0FBZ0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMkJBQTJCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZ0NBQWdDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0QkFBNEI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0QkFBNEI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0JBQStCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDBCQUEwQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpQ0FBaUM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQ0FBcUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZ0NBQWdDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtDQUFrQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0JBQStCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDBCQUEwQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0QkFBNEI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscURBQUs7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGlEQUFPO0FBQzNDLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxpQkFBaUIsRUFBRSxvQkFBb0I7QUFDMUU7QUFDQSxzQkFBc0IsMERBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuY2xpZW50Lm1qcz9hYWY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR1cm5rZXlSZXF1ZXN0RXJyb3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9iYXNlLm1qcyc7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgZmV0Y2ggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91bml2ZXJzYWwubWpzJztcblxuLyogQGdlbmVyYXRlZCBieSBgQHR1cm5rZXkvZmV0Y2hlcnNgLiBETyBOT1QgRURJVCBCWSBIQU5EICovXG5jbGFzcyBUdXJua2V5Q2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIHN0YW1wZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGFuIEFjdGl2aXR5XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0QWN0aXZpdHlCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FjdGl2aXR5KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wR2V0QWN0aXZpdHl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRBY3Rpdml0eSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FjdGl2aXR5XCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEdldEFjdGl2aXR5Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRBY3Rpdml0eX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wR2V0QWN0aXZpdHkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hY3Rpdml0eVwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRldGFpbHMgYWJvdXQgYW4gQVBJIGtleVxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldEFwaUtleUJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfYXBpX2tleSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEdldEFwaUtleX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0QXBpS2V5Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRBcGlLZXl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IEFQSSBrZXlzIGZvciBhIHVzZXJcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRHZXRBcGlLZXlzQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9hcGlfa2V5cykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEdldEFwaUtleXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRBcGlLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXBpX2tleXNcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0QXBpS2V5c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0QXBpS2V5c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wR2V0QXBpS2V5cyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlzXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgZGV0YWlscyBhYm91dCBhbiBhdXRoZW50aWNhdG9yXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0QXV0aGVudGljYXRvckJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfYXV0aGVudGljYXRvcikuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEdldEF1dGhlbnRpY2F0b3J9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRBdXRoZW50aWNhdG9yID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXV0aGVudGljYXRvclwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRBdXRoZW50aWNhdG9yQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRBdXRoZW50aWNhdG9yfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBHZXRBdXRoZW50aWNhdG9yID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXV0aGVudGljYXRvclwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRldGFpbHMgYWJvdXQgYXV0aGVudGljYXRvcnMgZm9yIGEgdXNlclxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldEF1dGhlbnRpY2F0b3JzQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9ycykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEdldEF1dGhlbnRpY2F0b3JzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0QXV0aGVudGljYXRvcnMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRBdXRoZW50aWNhdG9yc0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0QXV0aGVudGljYXRvcnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldEF1dGhlbnRpY2F0b3JzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXV0aGVudGljYXRvcnNcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGFuIE9yZ2FuaXphdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldE9yZ2FuaXphdGlvbkJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wR2V0T3JnYW5pemF0aW9ufS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0T3JnYW5pemF0aW9uID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEdldE9yZ2FuaXphdGlvbkJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0T3JnYW5pemF0aW9ufS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBHZXRPcmdhbml6YXRpb24gPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9vcmdhbml6YXRpb25cIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGEgUG9saWN5XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0UG9saWN5Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9wb2xpY3kpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRQb2xpY3l9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRQb2xpY3kgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9wb2xpY3lcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0UG9saWN5Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRQb2xpY3l9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldFBvbGljeSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3BvbGljeVwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRldGFpbHMgYWJvdXQgYSBQcml2YXRlIEtleVxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldFByaXZhdGVLZXlCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X3ByaXZhdGVfa2V5KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wR2V0UHJpdmF0ZUtleX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFByaXZhdGVLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9wcml2YXRlX2tleVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRQcml2YXRlS2V5Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRQcml2YXRlS2V5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBHZXRQcml2YXRlS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfcHJpdmF0ZV9rZXlcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGEgVXNlclxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldFVzZXJCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X3VzZXIpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRVc2VyfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0VXNlciA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3VzZXJcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0VXNlckJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0VXNlcn0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wR2V0VXNlciA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3VzZXJcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGEgV2FsbGV0XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0V2FsbGV0Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF93YWxsZXQpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRXYWxsZXR9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRXYWxsZXQgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2dldF93YWxsZXRcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0V2FsbGV0Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRXYWxsZXR9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldFdhbGxldCA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3dhbGxldFwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBhbGwgQWN0aXZpdGllcyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0QWN0aXZpdGllc0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9saXN0X2FjdGl2aXRpZXMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRBY3Rpdml0aWVzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0QWN0aXZpdGllcyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvcXVlcnkvbGlzdF9hY3Rpdml0aWVzXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEdldEFjdGl2aXRpZXNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEdldEFjdGl2aXRpZXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldEFjdGl2aXRpZXMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfYWN0aXZpdGllc1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBhbGwgUG9saWNpZXMgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldFBvbGljaWVzQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcG9saWNpZXMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRQb2xpY2llc30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFBvbGljaWVzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3BvbGljaWVzXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEdldFBvbGljaWVzQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBHZXRQb2xpY2llc30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wR2V0UG9saWNpZXMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcG9saWNpZXNcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3QgYWxsIFByaXZhdGUgS2V5IFRhZ3Mgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVExpc3RQcml2YXRlS2V5VGFnc0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9saXN0X3ByaXZhdGVfa2V5X3RhZ3MpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBMaXN0UHJpdmF0ZUtleVRhZ3N9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saXN0UHJpdmF0ZUtleVRhZ3MgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcHJpdmF0ZV9rZXlfdGFnc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRMaXN0UHJpdmF0ZUtleVRhZ3NCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIExpc3RQcml2YXRlS2V5VGFnc30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wTGlzdFByaXZhdGVLZXlUYWdzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3ByaXZhdGVfa2V5X3RhZ3NcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3QgYWxsIFByaXZhdGUgS2V5cyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0UHJpdmF0ZUtleXNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF9wcml2YXRlX2tleXMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRQcml2YXRlS2V5c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFByaXZhdGVLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3ByaXZhdGVfa2V5c1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRQcml2YXRlS2V5c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0UHJpdmF0ZUtleXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldFByaXZhdGVLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3ByaXZhdGVfa2V5c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBhbGwgVXNlciBUYWdzIHdpdGhpbiBhbiBPcmdhbml6YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRMaXN0VXNlclRhZ3NCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2VyX3RhZ3MpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBMaXN0VXNlclRhZ3N9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saXN0VXNlclRhZ3MgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfdXNlcl90YWdzXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVExpc3RVc2VyVGFnc0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgTGlzdFVzZXJUYWdzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBMaXN0VXNlclRhZ3MgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfdXNlcl90YWdzXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0IGFsbCBVc2VycyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0VXNlcnNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2VycykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEdldFVzZXJzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0VXNlcnMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfdXNlcnNcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUR2V0VXNlcnNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEdldFVzZXJzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBHZXRVc2VycyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2Vyc1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBhbGwgQWNjb3VudHMgd2lyaGluIGEgV2FsbGV0XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0V2FsbGV0QWNjb3VudHNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF93YWxsZXRfYWNjb3VudHMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRXYWxsZXRBY2NvdW50c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFdhbGxldEFjY291bnRzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldF9hY2NvdW50c1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRXYWxsZXRBY2NvdW50c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgR2V0V2FsbGV0QWNjb3VudHN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldFdhbGxldEFjY291bnRzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldF9hY2NvdW50c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBhbGwgV2FsbGV0cyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUR2V0V2FsbGV0c0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldHMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRXYWxsZXRzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0V2FsbGV0cyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvcXVlcnkvbGlzdF93YWxsZXRzXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEdldFdhbGxldHNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEdldFdhbGxldHN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcEdldFdhbGxldHMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3Rfd2FsbGV0c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgY3VycmVudCBBUEkgb3IgV2ViQXV0aE4gdXNlciBhbmQgdGhlaXIgb3JnYW5pemF0aW9uLiBBZmZvcmRzIFN1Yi1Pcmdhbml6YXRpb24gbG9vayB1cHMgdmlhIFBhcmVudCBPcmdhbml6YXRpb24gZm9yIFdlYkF1dGhOIHVzZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVEdldFdob2FtaUJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9xdWVyeS93aG9hbWkpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBHZXRXaG9hbWl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRXaG9hbWkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3F1ZXJ5L3dob2FtaVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRHZXRXaG9hbWlCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEdldFdob2FtaX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wR2V0V2hvYW1pID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9xdWVyeS93aG9hbWlcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcHJvdmUgYW4gQWN0aXZpdHlcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRBcHByb3ZlQWN0aXZpdHlCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2FwcHJvdmVfYWN0aXZpdHkpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBBcHByb3ZlQWN0aXZpdHl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hcHByb3ZlQWN0aXZpdHkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9hcHByb3ZlX2FjdGl2aXR5XCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEFwcHJvdmVBY3Rpdml0eUJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQXBwcm92ZUFjdGl2aXR5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBBcHByb3ZlQWN0aXZpdHkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9hcHByb3ZlX2FjdGl2aXR5XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYXBpIGtleXMgdG8gYW4gZXhpc3RpbmcgVXNlclxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVENyZWF0ZUFwaUtleXNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hcGlfa2V5cykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcENyZWF0ZUFwaUtleXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVBcGlLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9rZXlzXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVENyZWF0ZUFwaUtleXNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIENyZWF0ZUFwaUtleXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZUFwaUtleXMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfYXBpX2tleXNcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBBUEktb25seSBVc2VycyBpbiBhbiBleGlzdGluZyBPcmdhbml6YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVBcGlPbmx5VXNlcnNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hcGlfb25seV91c2VycykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcENyZWF0ZUFwaU9ubHlVc2Vyc30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZUFwaU9ubHlVc2VycyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hcGlfb25seV91c2Vyc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVBcGlPbmx5VXNlcnNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIENyZWF0ZUFwaU9ubHlVc2Vyc30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wQ3JlYXRlQXBpT25seVVzZXJzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9vbmx5X3VzZXJzXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgQXV0aGVudGljYXRvcnMgdG8gYXV0aGVudGljYXRlIHJlcXVlc3RzIHRvIFR1cm5rZXlcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVBdXRoZW50aWNhdG9yc0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2F1dGhlbnRpY2F0b3JzKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wQ3JlYXRlQXV0aGVudGljYXRvcnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVBdXRoZW50aWNhdG9ycyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hdXRoZW50aWNhdG9yc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVBdXRoZW50aWNhdG9yc0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlQXV0aGVudGljYXRvcnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZUF1dGhlbnRpY2F0b3JzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2F1dGhlbnRpY2F0b3JzXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgSW52aXRhdGlvbnMgdG8gam9pbiBhbiBleGlzdGluZyBPcmdhbml6YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVJbnZpdGF0aW9uc0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2ludml0YXRpb25zKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wQ3JlYXRlSW52aXRhdGlvbnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVJbnZpdGF0aW9ucyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9pbnZpdGF0aW9uc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVJbnZpdGF0aW9uc0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlSW52aXRhdGlvbnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZUludml0YXRpb25zID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2ludml0YXRpb25zXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBuZXcgUG9saWN5XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUQ3JlYXRlUG9saWN5Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcG9saWN5KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wQ3JlYXRlUG9saWN5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlUG9saWN5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3BvbGljeVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVQb2xpY3lCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIENyZWF0ZVBvbGljeX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wQ3JlYXRlUG9saWN5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3BvbGljeVwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgcHJpdmF0ZSBrZXkgdGFnIGFuZCBhZGQgaXQgdG8gcHJpdmF0ZSBrZXlzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVENyZWF0ZVByaXZhdGVLZXlUYWdCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wcml2YXRlX2tleV90YWcpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBDcmVhdGVQcml2YXRlS2V5VGFnfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlUHJpdmF0ZUtleVRhZyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wcml2YXRlX2tleV90YWdcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUQ3JlYXRlUHJpdmF0ZUtleVRhZ0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlUHJpdmF0ZUtleVRhZ30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wQ3JlYXRlUHJpdmF0ZUtleVRhZyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wcml2YXRlX2tleV90YWdcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBuZXcgUHJpdmF0ZSBLZXlzXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUQ3JlYXRlUHJpdmF0ZUtleXNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wcml2YXRlX2tleXMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBDcmVhdGVQcml2YXRlS2V5c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZVByaXZhdGVLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3ByaXZhdGVfa2V5c1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVQcml2YXRlS2V5c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlUHJpdmF0ZUtleXN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZVByaXZhdGVLZXlzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3ByaXZhdGVfa2V5c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgbmV3IFN1Yi1Pcmdhbml6YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVTdWJPcmdhbml6YXRpb25Cb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9zdWJfb3JnYW5pemF0aW9uKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wQ3JlYXRlU3ViT3JnYW5pemF0aW9ufS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlU3ViT3JnYW5pemF0aW9uID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3N1Yl9vcmdhbml6YXRpb25cIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUQ3JlYXRlU3ViT3JnYW5pemF0aW9uQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBDcmVhdGVTdWJPcmdhbml6YXRpb259LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZVN1Yk9yZ2FuaXphdGlvbiA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9zdWJfb3JnYW5pemF0aW9uXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSB1c2VyIHRhZyBhbmQgYWRkIGl0IHRvIHVzZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVENyZWF0ZVVzZXJUYWdCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV91c2VyX3RhZykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcENyZWF0ZVVzZXJUYWd9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVVc2VyVGFnID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3VzZXJfdGFnXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVENyZWF0ZVVzZXJUYWdCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIENyZWF0ZVVzZXJUYWd9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZVVzZXJUYWcgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfdXNlcl90YWdcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBVc2VycyBpbiBhbiBleGlzdGluZyBPcmdhbml6YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVVc2Vyc0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3VzZXJzKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wQ3JlYXRlVXNlcnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVVc2VycyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV91c2Vyc1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVVc2Vyc0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlVXNlcnN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZVVzZXJzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3VzZXJzXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBXYWxsZXQgYW5kIGRlcml2ZSBhZGRyZXNzZXNcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRDcmVhdGVXYWxsZXRCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV93YWxsZXQpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBDcmVhdGVXYWxsZXR9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jcmVhdGVXYWxsZXQgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfd2FsbGV0XCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVENyZWF0ZVdhbGxldEJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlV2FsbGV0fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBDcmVhdGVXYWxsZXQgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfd2FsbGV0XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXJpdmUgYWRkaXRpb25hbCBhZGRyZXNzZXMgdXNpbmcgYW4gZXhpc3Rpbmcgd2FsbGV0XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUQ3JlYXRlV2FsbGV0QWNjb3VudHNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV93YWxsZXRfYWNjb3VudHMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBDcmVhdGVXYWxsZXRBY2NvdW50c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZVdhbGxldEFjY291bnRzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3dhbGxldF9hY2NvdW50c1wiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRDcmVhdGVXYWxsZXRBY2NvdW50c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgQ3JlYXRlV2FsbGV0QWNjb3VudHN9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcENyZWF0ZVdhbGxldEFjY291bnRzID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3dhbGxldF9hY2NvdW50c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGFwaSBrZXlzIGZyb20gYSBVc2VyXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBURGVsZXRlQXBpS2V5c0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX2FwaV9rZXlzKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wRGVsZXRlQXBpS2V5c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlbGV0ZUFwaUtleXMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfYXBpX2tleXNcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBURGVsZXRlQXBpS2V5c0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgRGVsZXRlQXBpS2V5c30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wRGVsZXRlQXBpS2V5cyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9hcGlfa2V5c1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGF1dGhlbnRpY2F0b3JzIGZyb20gYSBVc2VyXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBURGVsZXRlQXV0aGVudGljYXRvcnNCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9hdXRoZW50aWNhdG9ycykuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcERlbGV0ZUF1dGhlbnRpY2F0b3JzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVsZXRlQXV0aGVudGljYXRvcnMgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfYXV0aGVudGljYXRvcnNcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBURGVsZXRlQXV0aGVudGljYXRvcnNCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIERlbGV0ZUF1dGhlbnRpY2F0b3JzfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBEZWxldGVBdXRoZW50aWNhdG9ycyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9hdXRoZW50aWNhdG9yc1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVsZXRlIGFuIGV4aXN0aW5nIEludml0YXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFREZWxldGVJbnZpdGF0aW9uQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfaW52aXRhdGlvbikuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcERlbGV0ZUludml0YXRpb259LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWxldGVJbnZpdGF0aW9uID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX2ludml0YXRpb25cIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBURGVsZXRlSW52aXRhdGlvbkJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgRGVsZXRlSW52aXRhdGlvbn0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wRGVsZXRlSW52aXRhdGlvbiA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9pbnZpdGF0aW9uXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGUgYW4gZXhpc3RpbmcgUG9saWN5XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBURGVsZXRlUG9saWN5Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfcG9saWN5KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wRGVsZXRlUG9saWN5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVsZXRlUG9saWN5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX3BvbGljeVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFREZWxldGVQb2xpY3lCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIERlbGV0ZVBvbGljeX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wRGVsZXRlUG9saWN5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX3BvbGljeVwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQXV0aGVudGljYXRlIGEgdXNlciB2aWEgRW1haWxcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRFbWFpbEF1dGhCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2VtYWlsX2F1dGgpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBFbWFpbEF1dGh9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbWFpbEF1dGggPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9lbWFpbF9hdXRoXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVEVtYWlsQXV0aEJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgRW1haWxBdXRofS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBFbWFpbEF1dGggPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9lbWFpbF9hdXRoXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHBvcnRzIGEgUHJpdmF0ZSBLZXlcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRFeHBvcnRQcml2YXRlS2V5Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfcHJpdmF0ZV9rZXkpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBFeHBvcnRQcml2YXRlS2V5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXhwb3J0UHJpdmF0ZUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2V4cG9ydF9wcml2YXRlX2tleVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRFeHBvcnRQcml2YXRlS2V5Qm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBFeHBvcnRQcml2YXRlS2V5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBFeHBvcnRQcml2YXRlS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3ByaXZhdGVfa2V5XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHBvcnRzIGEgV2FsbGV0XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBURXhwb3J0V2FsbGV0Qm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfd2FsbGV0KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wRXhwb3J0V2FsbGV0fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXhwb3J0V2FsbGV0ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3dhbGxldFwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRFeHBvcnRXYWxsZXRCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEV4cG9ydFdhbGxldH0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wRXhwb3J0V2FsbGV0ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3dhbGxldFwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhwb3J0cyBhIFdhbGxldCBBY2NvdW50XG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBURXhwb3J0V2FsbGV0QWNjb3VudEJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3dhbGxldF9hY2NvdW50KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wRXhwb3J0V2FsbGV0QWNjb3VudH0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmV4cG9ydFdhbGxldEFjY291bnQgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfd2FsbGV0X2FjY291bnRcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBURXhwb3J0V2FsbGV0QWNjb3VudEJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgRXhwb3J0V2FsbGV0QWNjb3VudH0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wRXhwb3J0V2FsbGV0QWNjb3VudCA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L2V4cG9ydF93YWxsZXRfYWNjb3VudFwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgZW1haWwgcmVjb3ZlcnlcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRJbml0VXNlckVtYWlsUmVjb3ZlcnlCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2luaXRfdXNlcl9lbWFpbF9yZWNvdmVyeSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcEluaXRVc2VyRW1haWxSZWNvdmVyeX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluaXRVc2VyRW1haWxSZWNvdmVyeSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L2luaXRfdXNlcl9lbWFpbF9yZWNvdmVyeVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRJbml0VXNlckVtYWlsUmVjb3ZlcnlCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIEluaXRVc2VyRW1haWxSZWNvdmVyeX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wSW5pdFVzZXJFbWFpbFJlY292ZXJ5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvaW5pdF91c2VyX2VtYWlsX3JlY292ZXJ5XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wbGV0ZXMgdGhlIHByb2Nlc3Mgb2YgcmVjb3ZlcmluZyBhIHVzZXIgYnkgYWRkaW5nIGFuIGF1dGhlbnRpY2F0b3JcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRSZWNvdmVyVXNlckJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvcmVjb3Zlcl91c2VyKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wUmVjb3ZlclVzZXJ9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWNvdmVyVXNlciA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L3JlY292ZXJfdXNlclwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRSZWNvdmVyVXNlckJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgUmVjb3ZlclVzZXJ9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcFJlY292ZXJVc2VyID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvcmVjb3Zlcl91c2VyXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWplY3QgYW4gQWN0aXZpdHlcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRSZWplY3RBY3Rpdml0eUJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvcmVqZWN0X2FjdGl2aXR5KS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wUmVqZWN0QWN0aXZpdHl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWplY3RBY3Rpdml0eSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L3JlamVjdF9hY3Rpdml0eVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRSZWplY3RBY3Rpdml0eUJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgUmVqZWN0QWN0aXZpdHl9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcFJlamVjdEFjdGl2aXR5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvcmVqZWN0X2FjdGl2aXR5XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmVzIGFuIG9yZ2FuaXphdGlvbiBmZWF0dXJlXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZUJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvcmVtb3ZlX29yZ2FuaXphdGlvbl9mZWF0dXJlKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbW92ZU9yZ2FuaXphdGlvbkZlYXR1cmUgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC9yZW1vdmVfb3JnYW5pemF0aW9uX2ZlYXR1cmVcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZUJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZX0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L3JlbW92ZV9vcmdhbml6YXRpb25fZmVhdHVyZVwiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyBhbiBvcmdhbml6YXRpb24gZmVhdHVyZVxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVFNldE9yZ2FuaXphdGlvbkZlYXR1cmVCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3NldF9vcmdhbml6YXRpb25fZmVhdHVyZSkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcFNldE9yZ2FuaXphdGlvbkZlYXR1cmV9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRPcmdhbml6YXRpb25GZWF0dXJlID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwiL3B1YmxpYy92MS9zdWJtaXQvc2V0X29yZ2FuaXphdGlvbl9mZWF0dXJlXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVFNldE9yZ2FuaXphdGlvbkZlYXR1cmVCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIFNldE9yZ2FuaXphdGlvbkZlYXR1cmV9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcFNldE9yZ2FuaXphdGlvbkZlYXR1cmUgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC9zZXRfb3JnYW5pemF0aW9uX2ZlYXR1cmVcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpZ24gYSByYXcgcGF5bG9hZFxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVFNpZ25SYXdQYXlsb2FkQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9zaWduX3Jhd19wYXlsb2FkKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wU2lnblJhd1BheWxvYWR9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaWduUmF3UGF5bG9hZCA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L3NpZ25fcmF3X3BheWxvYWRcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUU2lnblJhd1BheWxvYWRCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIFNpZ25SYXdQYXlsb2FkfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBTaWduUmF3UGF5bG9hZCA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L3NpZ25fcmF3X3BheWxvYWRcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpZ24gYSB0cmFuc2FjdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVFNpZ25UcmFuc2FjdGlvbkJvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvc2lnbl90cmFuc2FjdGlvbikuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBzdGFtcFNpZ25UcmFuc2FjdGlvbn0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNpZ25UcmFuc2FjdGlvbiA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L3NpZ25fdHJhbnNhY3Rpb25cIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUU2lnblRyYW5zYWN0aW9uQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBTaWduVHJhbnNhY3Rpb259LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcFNpZ25UcmFuc2FjdGlvbiA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L3NpZ25fdHJhbnNhY3Rpb25cIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBQb2xpY3lcbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRVcGRhdGVQb2xpY3lCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV9wb2xpY3kpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBVcGRhdGVQb2xpY3l9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVQb2xpY3kgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcG9saWN5XCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVFVwZGF0ZVBvbGljeUJvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgVXBkYXRlUG9saWN5fS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBVcGRhdGVQb2xpY3kgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcG9saWN5XCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgaHVtYW4tcmVhZGFibGUgbmFtZSBvciBhc3NvY2lhdGVkIHByaXZhdGUga2V5cy4gTm90ZSB0aGF0IHRoaXMgYWN0aXZpdHkgaXMgYXRvbWljOiBhbGwgb2YgdGhlIHVwZGF0ZXMgd2lsbCBzdWNjZWVkIGF0IG9uY2UsIG9yIGFsbCBvZiB0aGVtIHdpbGwgZmFpbC5cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRVcGRhdGVQcml2YXRlS2V5VGFnQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcHJpdmF0ZV9rZXlfdGFnKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wVXBkYXRlUHJpdmF0ZUtleVRhZ30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVByaXZhdGVLZXlUYWcgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcHJpdmF0ZV9rZXlfdGFnXCIsIGlucHV0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2UgYSBgU2lnbmVkUmVxdWVzdGAgZnJvbSBgVFVwZGF0ZVByaXZhdGVLZXlUYWdCb2R5YCBieSB1c2luZyB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIFVwZGF0ZVByaXZhdGVLZXlUYWd9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFtcFVwZGF0ZVByaXZhdGVLZXlUYWcgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcHJpdmF0ZV9rZXlfdGFnXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHRocmVzaG9sZCBhbmQgbWVtYmVycyBvZiB0aGUgcm9vdCBxdW9ydW0uIFRoaXMgbXVzdCBiZSBhcHByb3ZlZCBieSB0aGUgY3VycmVudCByb290IHF1b3J1bS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2lnbiB0aGUgcHJvdmlkZWQgYFRVcGRhdGVSb290UXVvcnVtQm9keWAgd2l0aCB0aGUgY2xpZW50J3MgYHN0YW1wYCBmdW5jdGlvbiwgYW5kIHN1Ym1pdCB0aGUgcmVxdWVzdCAoUE9TVCAvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcm9vdF9xdW9ydW0pLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgc3RhbXBVcGRhdGVSb290UXVvcnVtfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXBkYXRlUm9vdFF1b3J1bSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIi9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV9yb290X3F1b3J1bVwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRVcGRhdGVSb290UXVvcnVtQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBVcGRhdGVSb290UXVvcnVtfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBVcGRhdGVSb290UXVvcnVtID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3Jvb3RfcXVvcnVtXCI7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoYm9keSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgc3RhbXA6IHN0YW1wLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbFVybCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgYSBVc2VyIGluIGFuIGV4aXN0aW5nIE9yZ2FuaXphdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTaWduIHRoZSBwcm92aWRlZCBgVFVwZGF0ZVVzZXJCb2R5YCB3aXRoIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLCBhbmQgc3VibWl0IHRoZSByZXF1ZXN0IChQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV91c2VyKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wVXBkYXRlVXNlcn0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVVzZXIgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfdXNlclwiLCBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlIGEgYFNpZ25lZFJlcXVlc3RgIGZyb20gYFRVcGRhdGVVc2VyQm9keWAgYnkgdXNpbmcgdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBhbHNvIHtAbGluayBVcGRhdGVVc2VyfS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhbXBVcGRhdGVVc2VyID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmdWxsVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCArIFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3VzZXJcIjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzdGFtcCA9IGF3YWl0IHRoaXMuc3RhbXBlci5zdGFtcChib2R5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICBzdGFtcDogc3RhbXAsXG4gICAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZSBodW1hbi1yZWFkYWJsZSBuYW1lIG9yIGFzc29jaWF0ZWQgdXNlcnMuIE5vdGUgdGhhdCB0aGlzIGFjdGl2aXR5IGlzIGF0b21pYzogYWxsIG9mIHRoZSB1cGRhdGVzIHdpbGwgc3VjY2VlZCBhdCBvbmNlLCBvciBhbGwgb2YgdGhlbSB3aWxsIGZhaWwuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNpZ24gdGhlIHByb3ZpZGVkIGBUVXBkYXRlVXNlclRhZ0JvZHlgIHdpdGggdGhlIGNsaWVudCdzIGBzdGFtcGAgZnVuY3Rpb24sIGFuZCBzdWJtaXQgdGhlIHJlcXVlc3QgKFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3VzZXJfdGFnKS5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIGFsc28ge0BsaW5rIHN0YW1wVXBkYXRlVXNlclRhZ30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVVzZXJUYWcgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfdXNlcl90YWdcIiwgaW5wdXQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZSBhIGBTaWduZWRSZXF1ZXN0YCBmcm9tIGBUVXBkYXRlVXNlclRhZ0JvZHlgIGJ5IHVzaW5nIHRoZSBjbGllbnQncyBgc3RhbXBgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgYWxzbyB7QGxpbmsgVXBkYXRlVXNlclRhZ30uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YW1wVXBkYXRlVXNlclRhZyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbFVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgKyBcIi9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV91c2VyX3RhZ1wiO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy5zdGFtcGVyLnN0YW1wKGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIHN0YW1wOiBzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZ1bGxVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIWNvbmZpZy5iYXNlVXJsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgYmFzZSBVUkwuIFBsZWFzZSB2ZXJpZnkgZW52IHZhcnMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuc3RhbXBlciA9IHN0YW1wZXI7XG4gICAgfVxuICAgIGFzeW5jIHJlcXVlc3QodXJsLCBib2R5KSB7XG4gICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsICsgdXJsO1xuICAgICAgICBjb25zdCBzdHJpbmdpZmllZEJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSBhd2FpdCB0aGlzLnN0YW1wZXIuc3RhbXAoc3RyaW5naWZpZWRCb2R5KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmdWxsVXJsLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFtzdGFtcC5zdGFtcEhlYWRlck5hbWVdOiBzdGFtcC5zdGFtcEhlYWRlclZhbHVlLFxuICAgICAgICAgICAgICAgIFwiWC1DbGllbnQtVmVyc2lvblwiOiBWRVJTSU9OLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IHN0cmluZ2lmaWVkQm9keSxcbiAgICAgICAgICAgIHJlZGlyZWN0OiBcImZvbGxvd1wiLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgbGV0IHJlcztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleVJlcXVlc3RFcnJvcihyZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHVybmtleUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGljX2FwaS5jbGllbnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/async.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/async.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvYXN5bmMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0c7QUFDaEQ7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGlCQUFpQjtBQUMvRCxRQUFRLHFCQUFxQixLQUFLLDRCQUE0QjtBQUM5RDtBQUNBO0FBQ0EsWUFBWSwyREFBMkQ7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZEQUFvQjtBQUNsRCxrRUFBa0UsWUFBWTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZEQUFvQjtBQUNsRCw2Q0FBNkMsYUFBYTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZEQUFvQjtBQUNsRCw2Q0FBNkMsYUFBYTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsNkdBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxZQUFZLHNFQUFzRTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELGtFQUFrRSxZQUFZO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELDZDQUE2QyxhQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELDZDQUE2QyxhQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0VBQW9FLHNCQUFzQjtBQUMxRjs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvYXN5bmMubWpzPzQ1MjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWN0aXZpdHkgfSBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuZmV0Y2hlci5tanMnO1xuaW1wb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuXG5jb25zdCBERUZBVUxUX1JFRlJFU0hfSU5URVJWQUxfTVMgPSA1MDA7XG4vKipcbiAqIFdyYXBzIGEgcmVxdWVzdCB0byBjcmVhdGUgYSBmZXRjaGVyIHdpdGggYnVpbHQtaW4gYXN5bmMgcG9sbGluZyBzdXBwb3J0LlxuICpcbiAqIEBkZXByZWNhdGVkIHRoaXMgZnVuY3Rpb24gb25seSB3b3JrcyB3aXRoIHtAbGluayBUdXJua2V5QXBpfS5cbiAqIFVzZSB7QGxpbmsgVHVybmtleUNsaWVudH0gYW5kIHtAbGluayBjcmVhdGVBY3Rpdml0eVBvbGxlcn0gaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gd2l0aEFzeW5jUG9sbGluZyhwYXJhbXMpIHtcbiAgICBjb25zdCB7IHJlcXVlc3QsIHJlZnJlc2hJbnRlcnZhbE1zID0gREVGQVVMVF9SRUZSRVNIX0lOVEVSVkFMX01TIH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCBpbml0aWFsUmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGlucHV0KTtcbiAgICAgICAgbGV0IGFjdGl2aXR5ID0gaW5pdGlhbFJlc3BvbnNlLmFjdGl2aXR5O1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpdml0eS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0NPTVBMRVRFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpdml0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19DUkVBVEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXN5bmMgcGVuZGluZyBzdGF0ZSAtLSBrZWVwIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfUEVORElOR1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jIHBlbmRpbmcgc3RhdGUgLS0ga2VlcCBwb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0NPTlNFTlNVU19ORUVERURcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYWN0aXZpdHkgcmVxdWlyZXMgY29uc2Vuc3VzLCB3ZSBzaG91bGRuJ3QgYmUgcG9sbGluZyBmb3JldmVyLlxuICAgICAgICAgICAgICAgICAgICAvLyBZb3UgY2FuIHJlYWQgdGhlIGBUdXJua2V5QWN0aXZpdHlFcnJvcmAgdGhyb3duIHRvIGdldCB0aGUgYGFjdGl2aXR5SWRgLFxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBpdCBzb21ld2hlcmUsIHRoZW4gcmUtZmV0Y2ggdGhlIGFjdGl2aXR5IHZpYSBgLnBvc3RHZXRBY3Rpdml0eSguLi4pYFxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSByZXF1aXJlZCBhcHByb3ZhbHMvcmVqZWN0aW9ucyBhcmUgaW4gcGxhY2UuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQ29uc2Vuc3VzIG5lZWRlZCBmb3IgYWN0aXZpdHkgJHthY3Rpdml0eS5pZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogYWN0aXZpdHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogYWN0aXZpdHkuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlUeXBlOiBhY3Rpdml0eS50eXBlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19GQUlMRURcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBBY3Rpdml0eSBmYWlsZWRcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBY3Rpdml0eSAke2FjdGl2aXR5LmlkfSBmYWlsZWRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogYWN0aXZpdHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogYWN0aXZpdHkuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlUeXBlOiBhY3Rpdml0eS50eXBlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19SRUpFQ1RFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjdGl2aXR5IHdhcyByZWplY3RlZFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEFjdGl2aXR5ICR7YWN0aXZpdHkuaWR9IHdhcyByZWplY3RlZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5U3RhdHVzOiBhY3Rpdml0eS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGU6IGFjdGl2aXR5LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc3dpdGNoIGJsb2NrIGlzIGV4aGF1c3RpdmVcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0TmV2ZXIoYWN0aXZpdHkuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBzbGVlcChyZWZyZXNoSW50ZXJ2YWxNcyk7XG4gICAgICAgICAgICBjb25zdCBwb2xsaW5nUmVzcG9uc2UgPSBhd2FpdCBnZXRBY3Rpdml0eSh7XG4gICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGFjdGl2aXR5Lm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFjdGl2aXR5ID0gcG9sbGluZ1Jlc3BvbnNlLmFjdGl2aXR5O1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogV3JhcHMgYSBjbGllbnQgcmVxdWVzdCBmdW5jdGlvbiAoZS5nLiBgY2xpZW50LmNyZWF0ZVByaXZhdGVLZXlzYCkgaW4gYSBwb2xsZXIuXG4gKiBUaGUgZGVmYXVsdCByZWZyZXNoIGludGVydmFsIGlzIDUwMG1zLlxuICpcbiAqIFRoZSByZXR1cm5lZCBwb2xsZXIgd2lsbCBwb2xsIHVudGlsIHRoZSBhY3Rpdml0eSBiZWNvbWVzIGBDT01QTEVURURgLlxuICogSWYgdGhlIGFjdGl2aXR5IGJlY29tZXMgYEZBSUxFRGAgb3IgYFJFSkVDVEVEYCBvciBpcyBmbGFnZ2VkIGFzIGBORUVEU19DT05TRU5TVVNgLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFjdGl2aXR5UG9sbGVyID0gY3JlYXRlQWN0aXZpdHlQb2xsZXIoY2xpZW50LCBjbGllbnQuY3JlYXRlUHJpdmF0ZUtleXMpO1xuICogY29uc3QgYWN0aXZpdHkgPSBhd2FpdCBhY3Rpdml0eVBvbGxlcihpbnB1dCk7XG4gKiBjb25zb2xlLmxvZyhhY3Rpdml0eS5yZXN1bHQpOyAvLyBhY3Rpdml0eSBpcyBjb21wbGV0ZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQWN0aXZpdHlQb2xsZXIocGFyYW1zKSB7XG4gICAgY29uc3QgeyBjbGllbnQsIHJlcXVlc3RGbiwgcmVmcmVzaEludGVydmFsTXMgPSBERUZBVUxUX1JFRlJFU0hfSU5URVJWQUxfTVMsIH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCBpbml0aWFsUmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0Rm4oaW5wdXQpO1xuICAgICAgICBsZXQgYWN0aXZpdHkgPSBpbml0aWFsUmVzcG9uc2UuYWN0aXZpdHk7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGl2aXR5LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfQ09NUExFVEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0NSRUFURURcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3luYyBwZW5kaW5nIHN0YXRlIC0tIGtlZXAgcG9sbGluZ1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19QRU5ESU5HXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXN5bmMgcGVuZGluZyBzdGF0ZSAtLSBrZWVwIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfQ09OU0VOU1VTX05FRURFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhY3Rpdml0eSByZXF1aXJlcyBjb25zZW5zdXMsIHdlIHNob3VsZG4ndCBiZSBwb2xsaW5nIGZvcmV2ZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gcmVhZCB0aGUgYFR1cm5rZXlBY3Rpdml0eUVycm9yYCB0aHJvd24gdG8gZ2V0IHRoZSBgYWN0aXZpdHlJZGAsXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGl0IHNvbWV3aGVyZSwgdGhlbiByZS1mZXRjaCB0aGUgYWN0aXZpdHkgdmlhIGAucG9zdEdldEFjdGl2aXR5KC4uLilgXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHJlcXVpcmVkIGFwcHJvdmFscy9yZWplY3Rpb25zIGFyZSBpbiBwbGFjZS5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBDb25zZW5zdXMgbmVlZGVkIGZvciBhY3Rpdml0eSAke2FjdGl2aXR5LmlkfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5U3RhdHVzOiBhY3Rpdml0eS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGU6IGFjdGl2aXR5LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0ZBSUxFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjdGl2aXR5IGZhaWxlZFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEFjdGl2aXR5ICR7YWN0aXZpdHkuaWR9IGZhaWxlZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5U3RhdHVzOiBhY3Rpdml0eS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGU6IGFjdGl2aXR5LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX1JFSkVDVEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZpdHkgd2FzIHJlamVjdGVkXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQWN0aXZpdHkgJHthY3Rpdml0eS5pZH0gd2FzIHJlamVjdGVkYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5SWQ6IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlTdGF0dXM6IGFjdGl2aXR5LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogYWN0aXZpdHkudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzd2l0Y2ggYmxvY2sgaXMgZXhoYXVzdGl2ZVxuICAgICAgICAgICAgICAgICAgICBhc3NlcnROZXZlcihhY3Rpdml0eS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKHJlZnJlc2hJbnRlcnZhbE1zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvbGxpbmdSZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXRBY3Rpdml0eSh7XG4gICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogYWN0aXZpdHkuaWQsXG4gICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGFjdGl2aXR5Lm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhY3Rpdml0eSA9IHBvbGxpbmdSZXNwb25zZS5hY3Rpdml0eTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBzbGVlcChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgbXMpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoaW5wdXQsIG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6IGBVbmV4cGVjdGVkIGNhc2U6ICR7SlNPTi5zdHJpbmdpZnkoaW5wdXQpfWApO1xufVxuXG5leHBvcnQgeyBjcmVhdGVBY3Rpdml0eVBvbGxlciwgd2l0aEFzeW5jUG9sbGluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/config.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/config.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvY29uZmlnLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLEtBQUs7QUFDakM7QUFDQTtBQUNBOztBQUUwRDtBQUMxRCIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9jb25maWcubWpzPzI0ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uZmlnID0ge1xuICAgIGFwaVB1YmxpY0tleTogbnVsbCxcbiAgICBhcGlQcml2YXRlS2V5OiBudWxsLFxuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuY29uc3QgYnJvd3NlckNvbmZpZyA9IHtcbiAgICBiYXNlVXJsOiBudWxsLFxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBicm93c2VySW5pdCh2YWx1ZSkge1xuICAgIGJyb3dzZXJDb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBpbnN0ZWFkLCB3aGljaCBkb2Vzbid0IHJlbHkgb24gZ2xvYmFsIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICovXG5mdW5jdGlvbiBpbml0KHZhbHVlKSB7XG4gICAgY29uZmlnLmFwaVB1YmxpY0tleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVB1YmxpY0tleSwgXCJhcGlQdWJsaWNLZXlcIik7XG4gICAgY29uZmlnLmFwaVByaXZhdGVLZXkgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5hcGlQcml2YXRlS2V5LCBcImFwaVByaXZhdGVLZXlcIik7XG4gICAgY29uZmlnLmJhc2VVcmwgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5iYXNlVXJsLCBcImJhc2VVcmxcIik7XG59XG5mdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpUHVibGljS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKSxcbiAgICAgICAgYXBpUHJpdmF0ZUtleTogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKSxcbiAgICAgICAgYmFzZVVybDogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlckNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhicm93c2VyQ29uZmlnLmJhc2VVcmwsIFwiYmFzZVVybFwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoaW5wdXQsIG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiIHx8ICFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtuYW1lfVwiIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nYCk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbn1cblxuZXhwb3J0IHsgYnJvd3NlckluaXQsIGdldEJyb3dzZXJDb25maWcsIGdldENvbmZpZywgaW5pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRHO0FBQ1A7QUFDcEQ7QUFDeUI7QUFDdEI7QUFDSTtBQUNhO0FBQzdCOztBQUV4QztBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkZBQWtCOztBQUVtQjtBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9pbmRleC5tanM/MWQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwdWJsaWNfYXBpX2ZldGNoZXIgZnJvbSAnLi9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmZldGNoZXIubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlDbGllbnQgfSBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuY2xpZW50Lm1qcyc7XG5leHBvcnQgeyBicm93c2VySW5pdCwgaW5pdCB9IGZyb20gJy4vY29uZmlnLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5UmVxdWVzdEVycm9yLCBzZWFsQW5kU3RhbXBSZXF1ZXN0Qm9keSB9IGZyb20gJy4vYmFzZS5tanMnO1xuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuZXhwb3J0IHsgZ2V0V2ViQXV0aG5BdHRlc3RhdGlvbiB9IGZyb20gJy4vd2ViYXV0aG4ubWpzJztcbmV4cG9ydCB7IGNyZWF0ZUFjdGl2aXR5UG9sbGVyLCB3aXRoQXN5bmNQb2xsaW5nIH0gZnJvbSAnLi9hc3luYy5tanMnO1xuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbi5tanMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgVHVybmtleUFwaWAgaW5zdGVhZFxuICovXG5jb25zdCBQdWJsaWNBcGlTZXJ2aWNlID0gcHVibGljX2FwaV9mZXRjaGVyO1xuXG5leHBvcnQgeyBQdWJsaWNBcGlTZXJ2aWNlLCBwdWJsaWNfYXBpX2ZldGNoZXIgYXMgVHVybmtleUFwaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/shared.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/shared.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvc2hhcmVkLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLGdCQUFnQiwyREFBMkQ7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvc2hhcmVkLm1qcz82MmNhIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFR1cm5rZXlBY3Rpdml0eUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgY2F1c2UsIGFjdGl2aXR5SWQsIGFjdGl2aXR5U3RhdHVzLCBhY3Rpdml0eVR5cGUgfSA9IGlucHV0O1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUdXJua2V5QWN0aXZpdHlFcnJvclwiO1xuICAgICAgICB0aGlzLmFjdGl2aXR5SWQgPSBhY3Rpdml0eUlkID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlTdGF0dXMgPSBhY3Rpdml0eVN0YXR1cyA/PyBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2aXR5VHlwZSA9IGFjdGl2aXR5VHlwZSA/PyBudWxsO1xuICAgICAgICB0aGlzLmNhdXNlID0gY2F1c2UgPz8gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFR1cm5rZXlBY3Rpdml0eUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/universal.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/universal.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdW5pdmVyc2FsLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQzs7QUFFL0M7QUFDQTtBQUNBLGNBQWMsOENBQU87O0FBRUo7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdW5pdmVyc2FsLm1qcz80NDA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZldGNoIGFzIGZldGNoJDEgfSBmcm9tICdjcm9zcy1mZXRjaCc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBUaGlzIGlzIHVzZWZ1bCBmb3IgbW9ja2luZyBmZXRjaCBpbiB0ZXN0cy5cbmNvbnN0IGZldGNoID0gZmV0Y2gkMTtcblxuZXhwb3J0IHsgZmV0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXZlcnNhbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/version.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/version.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.7.1\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC92ZXJzaW9uLm1qcz9jNTBlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZFUlNJT04gPSBcIkB0dXJua2V5L2h0dHBAMi43LjFcIjtcblxuZXhwb3J0IHsgVkVSU0lPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9hcGkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ1o7QUFDNEQ7O0FBRXBHO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLDJFQUFrQztBQUN4RTtBQUNBO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLHlFQUFnQztBQUN0RTs7QUFFbUQ7QUFDbkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9hcGkubWpzPzQ1NjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVmZmVyVG9CYXNlNjR1cmwgfSBmcm9tICcuL2Jhc2U2NHVybC5tanMnO1xuaW1wb3J0IHsgY29udmVydCB9IGZyb20gJy4vY29udmVydC5tanMnO1xuaW1wb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gfSBmcm9tICcuL3NjaGVtYS5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24sIGNyZWRlbnRpYWwpO1xufVxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS9zb2xhbmEvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanM/MjJiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWZmZXJUb0Jhc2U2NHVybChidWZmZXIpIHtcbiAgICAvLyBCdWZmZXIgdG8gYmluYXJ5IHN0cmluZ1xuICAgIGNvbnN0IGJ5dGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIG9mIGJ5dGVWaWV3KSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICB9XG4gICAgLy8gQmluYXJ5IHN0cmluZyB0byBiYXNlNjRcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKHN0cik7XG4gICAgLy8gQmFzZTY0IHRvIGJhc2U2NHVybFxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBiYXNlNjR1cmwgc3RyaW5nIGlzIHdlbGwtZm9ybWVkLlxuICAgIGNvbnN0IGJhc2U2NHVybFN0cmluZyA9IGJhc2U2NFN0cmluZ1xuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKTtcbiAgICByZXR1cm4gYmFzZTY0dXJsU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9jb252ZXJ0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELElBQUk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlFO0FBQ3pFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanM/ZjE3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBleHBvcnQgdGhlc2UgdmFsdWVzIGluIG9yZGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB0byBkZWR1cGxpY2F0ZVxuLy8gc2NoZW1hIGRlZmluaXRpb25zIGluIG1pbmlmaWVkIEpTIGNvZGUuXG4vLyBUT0RPOiBQYXJjZWwgaXNuJ3QgZGVkdXBsaWNhdGluZyB0aGVzZSB2YWx1ZXMuXG5jb25zdCBjb3B5VmFsdWUgPSBcImNvcHlcIjtcbmNvbnN0IGNvbnZlcnRWYWx1ZSA9IFwiY29udmVydFwiO1xuZnVuY3Rpb24gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoc2NoZW1hID09PSBjb3B5VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSBjb252ZXJ0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25GbihpbnB1dCk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKCh2KSA9PiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hWzBdLCB2KSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hRmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5kZXJpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2NoZW1hRmllbGQuZGVyaXZlKGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoZW1hRmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmllbGRzIGNhbiBiZSBudWxsIChyYXRoZXIgdGhhbiBtaXNzaW5nIG9yIGB1bmRlZmluZWRgKSwgZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGB1c2VySGFuZGxlYCBmaWVsZCBvZiB0aGUgYEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZWA6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4vI2lmYWNlLWF1dGhlbnRpY2F0b3Jhc3NlcnRpb25yZXNwb25zZVxuICAgICAgICAgICAgaWYgKGlucHV0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gY29udmVydChjb252ZXJzaW9uRm4sIHNjaGVtYUZpZWxkLnNjaGVtYSwgaW5wdXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXJpdmVkKHNjaGVtYSwgZGVyaXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZGVyaXZlLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXF1aXJlZChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5mdW5jdGlvbiBvcHRpb25hbChzY2hlbWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNjaGVtYSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0LCBjb252ZXJ0VmFsdWUsIGNvcHlWYWx1ZSwgZGVyaXZlZCwgb3B0aW9uYWwsIHJlcXVpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9FOztBQUVwRTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyREFBaUI7QUFDN0M7QUFDQTs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9pbmRleC5tanM/NTA2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXNwb25zZVRvSlNPTiwgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5jcmVhdGUob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGNyZWF0ZVJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZSwgZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9zY2hlbWEubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRjs7QUFFckY7QUFDQSxXQUFXLHNEQUFRLENBQUMsbURBQVM7QUFDN0Isa0JBQWtCLHNEQUFRLENBQUMsbURBQVM7QUFDcEMsZUFBZSxzREFBUSxDQUFDLG1EQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsb0JBQW9CLHFEQUFPLENBQUMsbURBQVM7QUFDckMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG1CQUFtQixzREFBUSxDQUFDLHNEQUFZO0FBQ3hDLG9CQUFvQixzREFBUSxDQUFDLHNEQUFZO0FBQ3pDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7O0FBRWdGO0FBQ2hGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3NvbGFuYS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcz9hMTZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmNyZWF0ZSgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdHJhbnNwb3J0czogZGVyaXZlZChjb3B5VmFsdWUsIChyZXNwb25zZSkgPT4gcmVzcG9uc2UuZ2V0VHJhbnNwb3J0cz8uKCkgfHwgW10pLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcbi8vIGBuYXZpZ2F0b3IuZ2V0KClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiA9IHtcbiAgICB0eXBlOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIGlkOiByZXF1aXJlZChjb3B5VmFsdWUpLFxuICAgIHJhd0lkOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIGF1dGhlbnRpY2F0b3JBdHRhY2htZW50OiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIHJlc3BvbnNlOiByZXF1aXJlZCh7XG4gICAgICAgIGNsaWVudERhdGFKU09OOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgc2lnbmF0dXJlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB1c2VySGFuZGxlOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgIH0pLFxuICAgIGNsaWVudEV4dGVuc2lvblJlc3VsdHM6IGRlcml2ZWQoc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEsIChwa2MpID0+IHBrYy5nZXRDbGllbnRFeHRlbnNpb25SZXN1bHRzKCkpLFxufTtcblxuZXhwb3J0IHsgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24sIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXR0ZXN0YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7O0FBRXhELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDZEQUFHO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0VBQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkY7QUFDN0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvc29sYW5hL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4ubWpzPzMyMmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlLCBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcblxuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSA1ICogNjAgKiAxMDAwOyAvLyBmaXZlIG1pbnV0ZXNcbmNvbnN0IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uID0gXCJwcmVmZXJyZWRcIjtcbmNvbnN0IGRlZmF1bHRTaWduaW5nT3B0aW9ucyA9IHtcbiAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgdGltZW91dDogZGVmYXVsdFRpbWVvdXQsXG4gICAgICAgIHVzZXJWZXJpZmljYXRpb246IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uLFxuICAgIH0sXG59O1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIHRrU2lnbmluZ09wdGlvbnMgPSBkZWZhdWx0U2lnbmluZ09wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFsbGVuZ2UgPSBhd2FpdCBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucyxcbiAgICAgICAgcHVibGljS2V5OiB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0U2lnbmluZ09wdGlvbnMucHVibGljS2V5LFxuICAgICAgICAgICAgLi4udGtTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICBjaGFsbGVuZ2UsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc2lnbmluZ09wdGlvbnM7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgY29uc3QgbWVzc2FnZUJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwYXlsb2FkKTtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG1lc3NhZ2VCdWZmZXIpO1xuICAgIGNvbnN0IGhleFN0cmluZyA9IEJ1ZmZlci5mcm9tKGhhc2hCdWZmZXIpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IGhleEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGhleFN0cmluZywgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShoZXhCdWZmZXIpO1xufVxuLyogUHVsbGVkIGZyb20gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmF1dGhuLTIvI2VudW0tdHJhbnNwb3J0ICovXG5mdW5jdGlvbiBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bShwcm90b2NvbEVudW0pIHtcbiAgICBzd2l0Y2ggKHByb3RvY29sRW51bSkge1xuICAgICAgICBjYXNlIFwiaW50ZXJuYWxcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSU5URVJOQUxcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidXNiXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX1VTQlwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJuZmNcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfTkZDXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJsZVwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9CTEVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaHlicmlkXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0hZQlJJRFwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHRyYW5zcG9ydCBmb3JtYXRcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b0ludGVybmFsQXR0ZXN0YXRpb24oYXR0ZXN0YXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVkZW50aWFsSWQ6IGF0dGVzdGF0aW9uLnJhd0lkLFxuICAgICAgICBhdHRlc3RhdGlvbk9iamVjdDogYXR0ZXN0YXRpb24ucmVzcG9uc2UuYXR0ZXN0YXRpb25PYmplY3QsXG4gICAgICAgIGNsaWVudERhdGFKc29uOiBhdHRlc3RhdGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgdHJhbnNwb3J0czogYXR0ZXN0YXRpb24ucmVzcG9uc2UudHJhbnNwb3J0cy5tYXAocHJvdG9jb2xUcmFuc3BvcnRFbnVtVG9JbnRlcm5hbEVudW0pLFxuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkFzc2VydGlvbihwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgd2ViQXV0aG5TdXBwb3J0ZWQgPSBoYXNXZWJBdXRoblN1cHBvcnQoKTtcbiAgICBpZiAoIXdlYkF1dGhuU3VwcG9ydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlYmF1dGhuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IGF3YWl0IGdldENyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyhwYXlsb2FkLCBvcHRpb25zKTtcbiAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgIGNvbnN0IGFzc2VydGlvbiA9IGNsaWVudEdldFJlc3VsdC50b0pTT04oKTtcbiAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGFzc2VydGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgY3JlZGVudGlhbElkOiBhc3NlcnRpb24uaWQsXG4gICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGFtcCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXZWJBdXRobkF0dGVzdGF0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZShvcHRpb25zKTtcbiAgICByZXR1cm4gdG9JbnRlcm5hbEF0dGVzdGF0aW9uKHJlcy50b0pTT04oKSk7XG59XG4vLyBgaGFzV2ViQXV0aG5TdXBwb3J0YCBjaGVja3MgZm9yIGJhcmVib25lcyB3ZWJhdXRobiBzdXBwb3J0LlxuLy8gRm9yIGFkZGl0aW9uYWwgZGV0YWlscyBhbmQgZ3JhbnVsYXIgc2V0dGluZ3MsIHNlZTpcbi8vIGh0dHBzOi8vd2ViLmRldi9hcnRpY2xlcy9wYXNza2V5LWZvcm0tYXV0b2ZpbGwjZmVhdHVyZS1kZXRlY3Rpb24sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QdWJsaWNLZXlDcmVkZW50aWFsXG5mdW5jdGlvbiBoYXNXZWJBdXRoblN1cHBvcnQoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LlB1YmxpY0tleUNyZWRlbnRpYWw7XG59XG5cbmV4cG9ydCB7IGdldFdlYkF1dGhuQXNzZXJ0aW9uLCBnZXRXZWJBdXRobkF0dGVzdGF0aW9uLCBwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViYXV0aG4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/solana/node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/viem/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/viem/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: () => (/* binding */ createAccount),\n/* harmony export */   createApiKeyAccount: () => (/* binding */ createApiKeyAccount)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/signatureToHex.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/./node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/./node_modules/@turnkey/http/dist/index.mjs\");\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n\n\n\n\n\nasync function createAccount(input) {\n    const { client, organizationId, signWith } = input;\n    let { ethereumAddress } = input;\n    if (!signWith) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Missing signWith parameter`,\n        });\n    }\n    if ((0,viem__WEBPACK_IMPORTED_MODULE_2__.isAddress)(signWith)) {\n        // override provided `ethereumAddress`\n        ethereumAddress = signWith;\n    }\n    else if (!ethereumAddress) {\n        // we have a private key ID, but not an ethereumAddress\n        const data = await client.getPrivateKey({\n            privateKeyId: signWith,\n            organizationId: organizationId,\n        });\n        ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n        if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Unable to find Ethereum address for key ${signWith} under organization ${organizationId}`,\n            });\n        }\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, signWith);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, signWith);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, signWith);\n        },\n    });\n}\n/**\n * Creates a new Custom Account backed by a Turnkey API key.\n * @deprecated use {@link createAccount} instead.\n */\nasync function createApiKeyAccount(config) {\n    const { apiPublicKey, apiPrivateKey, baseUrl, organizationId, privateKeyId } = config;\n    const stamper = new _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper({\n        apiPublicKey: apiPublicKey,\n        apiPrivateKey: apiPrivateKey,\n    });\n    const client = new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient({\n        baseUrl: baseUrl,\n    }, stamper);\n    const data = await client.getPrivateKey({\n        privateKeyId: privateKeyId,\n        organizationId: organizationId,\n    });\n    const ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n    if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Unable to find Ethereum address for key ${privateKeyId} under organization ${organizationId}`,\n        });\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, privateKeyId);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, privateKeyId);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, privateKeyId);\n        },\n    });\n}\nasync function signMessage(client, message, organizationId, signWith) {\n    const hashedMessage = (0,viem__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(message);\n    const signedMessage = await signMessageWithErrorWrapping(client, hashedMessage, organizationId, signWith);\n    return `${signedMessage}`;\n}\nasync function signTransaction(client, transaction, serializer, organizationId, signWith) {\n    const serializedTx = serializer(transaction);\n    const nonHexPrefixedSerializedTx = serializedTx.replace(/^0x/, \"\");\n    return await signTransactionWithErrorWrapping(client, nonHexPrefixedSerializedTx, organizationId, signWith);\n}\nasync function signTypedData(client, data, organizationId, signWith) {\n    const hashToSign = (0,viem__WEBPACK_IMPORTED_MODULE_6__.hashTypedData)(data);\n    return await signMessageWithErrorWrapping(client, hashToSign, organizationId, signWith);\n}\nasync function signTransactionWithErrorWrapping(client, unsignedTransaction, organizationId, signWith) {\n    let signedTx;\n    try {\n        signedTx = await signTransactionImpl(client, unsignedTransaction, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign transaction: ${error.message}`,\n            cause: error,\n        });\n    }\n    return `0x${signedTx}`;\n}\nasync function signTransactionImpl(client, unsignedTransaction, organizationId, signWith) {\n    const { activity } = await client.signTransaction({\n        type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\",\n        organizationId: organizationId,\n        parameters: {\n            signWith,\n            type: \"TRANSACTION_TYPE_ETHEREUM\",\n            unsignedTransaction: unsignedTransaction,\n        },\n        timestampMs: String(Date.now()), // millisecond timestamp\n    });\n    const { id, status, type } = activity;\n    if (activity.status === \"ACTIVITY_STATUS_COMPLETED\") {\n        return assertNonNull(activity?.result?.signTransactionResult?.signedTransaction);\n    }\n    throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n        message: `Invalid activity status: ${activity.status}`,\n        activityId: id,\n        activityStatus: status,\n        activityType: type,\n    });\n}\nasync function signMessageWithErrorWrapping(client, message, organizationId, signWith) {\n    let signedMessage;\n    try {\n        signedMessage = await signMessageImpl(client, message, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign: ${error.message}`,\n            cause: error,\n        });\n    }\n    return signedMessage;\n}\nasync function signMessageImpl(client, message, organizationId, signWith) {\n    const { activity } = await client.signRawPayload({\n        type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n        organizationId: organizationId,\n        parameters: {\n            signWith,\n            payload: message,\n            encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n            hashFunction: \"HASH_FUNCTION_NO_OP\",\n        },\n        timestampMs: String(Date.now()), // millisecond timestamp\n    });\n    const { id, status, type } = activity;\n    if (activity.status === \"ACTIVITY_STATUS_COMPLETED\") {\n        let result = assertNonNull(activity?.result?.signRawPayloadResult);\n        let assembled = (0,viem__WEBPACK_IMPORTED_MODULE_7__.signatureToHex)({\n            r: `0x${result.r}`,\n            s: `0x${result.s}`,\n            v: result.v === \"00\" ? 27n : 28n,\n        });\n        // Assemble the hex\n        return assertNonNull(assembled);\n    }\n    throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n        message: `Invalid activity status: ${activity.status}`,\n        activityId: id,\n        activityStatus: status,\n        activityType: type,\n    });\n}\nfunction assertNonNull(input) {\n    if (input == null) {\n        throw new Error(`Got unexpected ${JSON.stringify(input)}`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/viem/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for a webauthn stamp\nconst stampHeaderName = \"X-Stamp-Webauthn\";\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass WebauthnStamper {\n    constructor(config) {\n        this.rpId = config.rpId;\n        this.timeout = config.timeout || defaultTimeout;\n        this.userVerification = config.userVerification || defaultUserVerification;\n        this.allowCredentials = config.allowCredentials || [];\n    }\n    async stamp(payload) {\n        const challenge = getChallengeFromPayload(payload);\n        const signingOptions = {\n            publicKey: {\n                rpId: this.rpId,\n                challenge: challenge,\n                allowCredentials: this.allowCredentials,\n                timeout: this.timeout,\n                userVerification: this.userVerification,\n            },\n        };\n        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n        const assertion = clientGetResult.toJSON();\n        const stamp = {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJson: assertion.response.clientDataJSON,\n            credentialId: assertion.id,\n            signature: assertion.response.signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: JSON.stringify(stamp),\n        };\n    }\n}\nfunction getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(messageBuffer);\n    const hexString = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ1A7QUFDSzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQ0FBc0MsNkRBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDREQUFNO0FBQzdCLHNCQUFzQixrREFBTTtBQUM1QixzQkFBc0Isa0RBQU07QUFDNUI7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L2luZGV4Lm1qcz83OWM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldCB9IGZyb20gJy4vd2ViYXV0aG4tanNvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi91bml2ZXJzYWwubWpzJztcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMjU2JztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIEhlYWRlciBuYW1lIGZvciBhIHdlYmF1dGhuIHN0YW1wXG5jb25zdCBzdGFtcEhlYWRlck5hbWUgPSBcIlgtU3RhbXAtV2ViYXV0aG5cIjtcbmNvbnN0IGRlZmF1bHRUaW1lb3V0ID0gNSAqIDYwICogMTAwMDsgLy8gZml2ZSBtaW51dGVzXG5jb25zdCBkZWZhdWx0VXNlclZlcmlmaWNhdGlvbiA9IFwicHJlZmVycmVkXCI7XG4vKipcbiAqIFN0YW1wZXIgdG8gdXNlIHdpdGggYEB0dXJua2V5L2h0dHBgJ3MgYFR1cm5rZXlDbGllbnRgXG4gKi9cbmNsYXNzIFdlYmF1dGhuU3RhbXBlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMucnBJZCA9IGNvbmZpZy5ycElkO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBjb25maWcudGltZW91dCB8fCBkZWZhdWx0VGltZW91dDtcbiAgICAgICAgdGhpcy51c2VyVmVyaWZpY2F0aW9uID0gY29uZmlnLnVzZXJWZXJpZmljYXRpb24gfHwgZGVmYXVsdFVzZXJWZXJpZmljYXRpb247XG4gICAgICAgIHRoaXMuYWxsb3dDcmVkZW50aWFscyA9IGNvbmZpZy5hbGxvd0NyZWRlbnRpYWxzIHx8IFtdO1xuICAgIH1cbiAgICBhc3luYyBzdGFtcChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZSA9IGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpO1xuICAgICAgICBjb25zdCBzaWduaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHB1YmxpY0tleToge1xuICAgICAgICAgICAgICAgIHJwSWQ6IHRoaXMucnBJZCxcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2U6IGNoYWxsZW5nZSxcbiAgICAgICAgICAgICAgICBhbGxvd0NyZWRlbnRpYWxzOiB0aGlzLmFsbG93Q3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgdGltZW91dDogdGhpcy50aW1lb3V0LFxuICAgICAgICAgICAgICAgIHVzZXJWZXJpZmljYXRpb246IHRoaXMudXNlclZlcmlmaWNhdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsaWVudEdldFJlc3VsdCA9IGF3YWl0IGdldChzaWduaW5nT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGFzc2VydGlvbiA9IGNsaWVudEdldFJlc3VsdC50b0pTT04oKTtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogYXNzZXJ0aW9uLnJlc3BvbnNlLmF1dGhlbnRpY2F0b3JEYXRhLFxuICAgICAgICAgICAgY2xpZW50RGF0YUpzb246IGFzc2VydGlvbi5yZXNwb25zZS5jbGllbnREYXRhSlNPTixcbiAgICAgICAgICAgIGNyZWRlbnRpYWxJZDogYXNzZXJ0aW9uLmlkLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBhc3NlcnRpb24ucmVzcG9uc2Uuc2lnbmF0dXJlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhbXBIZWFkZXJOYW1lOiBzdGFtcEhlYWRlck5hbWUsXG4gICAgICAgICAgICBzdGFtcEhlYWRlclZhbHVlOiBKU09OLnN0cmluZ2lmeShzdGFtcCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlRnJvbVBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IG1lc3NhZ2VCdWZmZXIgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocGF5bG9hZCk7XG4gICAgY29uc3QgaGFzaEJ1ZmZlciA9IHNoYTI1NihtZXNzYWdlQnVmZmVyKTtcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBidWZmZXIuZnJvbShoYXNoQnVmZmVyKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCBoZXhCdWZmZXIgPSBidWZmZXIuZnJvbShoZXhTdHJpbmcsIFwidXRmOFwiKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGV4QnVmZmVyKTtcbn1cblxuZXhwb3J0IHsgV2ViYXV0aG5TdGFtcGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buffer: () => (/* binding */ buffer)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n\n\n/// <reference lib=\"dom\" />\nlet buffer;\nif (typeof globalThis?.Buffer !== \"undefined\") {\n    buffer = globalThis.Buffer;\n}\nelse {\n    buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n}\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQU07QUFDbkI7O0FBRWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVyc2VibG9jLy4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC91bml2ZXJzYWwubWpzP2YzMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmxldCBidWZmZXI7XG5pZiAodHlwZW9mIGdsb2JhbFRoaXM/LkJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGJ1ZmZlciA9IGdsb2JhbFRoaXMuQnVmZmVyO1xufVxuZWxzZSB7XG4gICAgYnVmZmVyID0gQnVmZmVyO1xufVxuXG5leHBvcnQgeyBidWZmZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXZlcnNhbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ1o7QUFDd0I7O0FBRWhFO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLHlFQUFnQztBQUN0RTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcz9jZmFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH0gZnJvbSAnLi9iYXNlNjR1cmwubWpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcbmltcG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH0gZnJvbSAnLi9zY2hlbWEubWpzJztcblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcz9iNjhiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL251cnNlYmxvYy8uL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3Qvd2ViYXV0aG4tanNvbi9jb252ZXJ0Lm1qcz8wYjUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\");\n\n\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUVlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzPzA3ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRjs7QUFFckY7QUFDQSxXQUFXLHNEQUFRLENBQUMsbURBQVM7QUFDN0Isa0JBQWtCLHNEQUFRLENBQUMsbURBQVM7QUFDcEMsZUFBZSxzREFBUSxDQUFDLG1EQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udXJzZWJsb2MvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcz9kNzE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmdldCgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gPSB7XG4gICAgdHlwZTogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICBpZDogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICByYXdJZDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICBhdXRoZW50aWNhdG9yQXR0YWNobWVudDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICByZXNwb25zZTogcmVxdWlyZWQoe1xuICAgICAgICBjbGllbnREYXRhSlNPTjogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHNpZ25hdHVyZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdXNlckhhbmRsZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICB9KSxcbiAgICBjbGllbnRFeHRlbnNpb25SZXN1bHRzOiBkZXJpdmVkKHNpbXBsaWZpZWRDbGllbnRFeHRlbnNpb25SZXN1bHRzU2NoZW1hLCAocGtjKSA9PiBwa2MuZ2V0Q2xpZW50RXh0ZW5zaW9uUmVzdWx0cygpKSxcbn07XG5cbmV4cG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\n");

/***/ })

};
;